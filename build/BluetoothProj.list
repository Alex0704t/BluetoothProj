
build/BluetoothProj.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08000d51 	.word	0x08000d51
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080002db 	.word	0x080002db
 800005c:	080002db 	.word	0x080002db
 8000060:	080002db 	.word	0x080002db
 8000064:	080002db 	.word	0x080002db
 8000068:	080002db 	.word	0x080002db
 800006c:	08002411 	.word	0x08002411
 8000070:	080023c1 	.word	0x080023c1
 8000074:	08002371 	.word	0x08002371
 8000078:	08002321 	.word	0x08002321
 800007c:	080022e1 	.word	0x080022e1
 8000080:	08002291 	.word	0x08002291
 8000084:	08002241 	.word	0x08002241
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080002db 	.word	0x080002db
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	08001ea1 	.word	0x08001ea1
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080002db 	.word	0x080002db
 80000c0:	080002db 	.word	0x080002db
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	08001e71 	.word	0x08001e71
 80000d8:	08001e41 	.word	0x08001e41
 80000dc:	08001e11 	.word	0x08001e11
 80000e0:	080002db 	.word	0x080002db
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080021f1 	.word	0x080021f1
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	080002db 	.word	0x080002db
 800010c:	080002db 	.word	0x080002db
 8000110:	08001de1 	.word	0x08001de1
 8000114:	08001db1 	.word	0x08001db1
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	080021b1 	.word	0x080021b1
 8000124:	08002161 	.word	0x08002161
 8000128:	08002111 	.word	0x08002111
 800012c:	080020c1 	.word	0x080020c1
 8000130:	08002081 	.word	0x08002081
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080002db 	.word	0x080002db
 8000150:	08002031 	.word	0x08002031
 8000154:	08001fe1 	.word	0x08001fe1
 8000158:	08001f91 	.word	0x08001f91
 800015c:	08001d81 	.word	0x08001d81
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f002 f95c 	bl	80024e0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f001 fc72 	bl	8001b10 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f002 f8ee 	bl	8002450 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f002 f92c 	bl	80024d0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f000 fe82 	bl	8000f90 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f002 b910 	b.w	80024c0 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 80002b4:	08002984 	.word	0x08002984
                ldr     r2, =_data_start
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002bc:	20000820 	.word	0x20000820
                ldr     r1, =_bss_start
 80002c0:	20000820 	.word	0x20000820
                ldr     r2, =_bss_end
 80002c4:	20001360 	.word	0x20001360
                ldr     r4, =__init_array_start
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002f0:	f000 fd6e 	bl	8000dd0 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002fa:	4628      	mov	r0, r5
                blx     r4
 80002fc:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002fe:	2000      	movs	r0, #0
                bl      chThdExit
 8000300:	f001 fbd6 	bl	8001ab0 <chThdExit>

08000304 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 8000304:	f000 fd8c 	bl	8000e20 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 8000308:	f000 fd32 	bl	8000d70 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 800030c:	f000 fd60 	bl	8000dd0 <_dbg_check_unlock>

08000310 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000310:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000312:	e7fe      	b.n	8000312 <_port_exit_from_isr+0x2>
	...

08000340 <strlen>:
 8000340:	f890 f000 	pld	[r0]
 8000344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000348:	f020 0107 	bic.w	r1, r0, #7
 800034c:	f06f 0c00 	mvn.w	ip, #0
 8000350:	f010 0407 	ands.w	r4, r0, #7
 8000354:	f891 f020 	pld	[r1, #32]
 8000358:	f040 8049 	bne.w	80003ee <strlen+0xae>
 800035c:	f04f 0400 	mov.w	r4, #0
 8000360:	f06f 0007 	mvn.w	r0, #7
 8000364:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000368:	f891 f040 	pld	[r1, #64]	; 0x40
 800036c:	f100 0008 	add.w	r0, r0, #8
 8000370:	fa82 f24c 	uadd8	r2, r2, ip
 8000374:	faa4 f28c 	sel	r2, r4, ip
 8000378:	fa83 f34c 	uadd8	r3, r3, ip
 800037c:	faa2 f38c 	sel	r3, r2, ip
 8000380:	bb4b      	cbnz	r3, 80003d6 <strlen+0x96>
 8000382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000386:	fa82 f24c 	uadd8	r2, r2, ip
 800038a:	f100 0008 	add.w	r0, r0, #8
 800038e:	faa4 f28c 	sel	r2, r4, ip
 8000392:	fa83 f34c 	uadd8	r3, r3, ip
 8000396:	faa2 f38c 	sel	r3, r2, ip
 800039a:	b9e3      	cbnz	r3, 80003d6 <strlen+0x96>
 800039c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80003a0:	fa82 f24c 	uadd8	r2, r2, ip
 80003a4:	f100 0008 	add.w	r0, r0, #8
 80003a8:	faa4 f28c 	sel	r2, r4, ip
 80003ac:	fa83 f34c 	uadd8	r3, r3, ip
 80003b0:	faa2 f38c 	sel	r3, r2, ip
 80003b4:	b97b      	cbnz	r3, 80003d6 <strlen+0x96>
 80003b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80003ba:	f101 0120 	add.w	r1, r1, #32
 80003be:	fa82 f24c 	uadd8	r2, r2, ip
 80003c2:	f100 0008 	add.w	r0, r0, #8
 80003c6:	faa4 f28c 	sel	r2, r4, ip
 80003ca:	fa83 f34c 	uadd8	r3, r3, ip
 80003ce:	faa2 f38c 	sel	r3, r2, ip
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0c6      	beq.n	8000364 <strlen+0x24>
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	bf04      	itt	eq
 80003da:	3004      	addeq	r0, #4
 80003dc:	461a      	moveq	r2, r3
 80003de:	ba12      	rev	r2, r2
 80003e0:	fab2 f282 	clz	r2, r2
 80003e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80003e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80003ec:	4770      	bx	lr
 80003ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80003f2:	f004 0503 	and.w	r5, r4, #3
 80003f6:	f1c4 0000 	rsb	r0, r4, #0
 80003fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80003fe:	f014 0f04 	tst.w	r4, #4
 8000402:	f891 f040 	pld	[r1, #64]	; 0x40
 8000406:	fa0c f505 	lsl.w	r5, ip, r5
 800040a:	ea62 0205 	orn	r2, r2, r5
 800040e:	bf1c      	itt	ne
 8000410:	ea63 0305 	ornne	r3, r3, r5
 8000414:	4662      	movne	r2, ip
 8000416:	f04f 0400 	mov.w	r4, #0
 800041a:	e7a9      	b.n	8000370 <strlen+0x30>
 800041c:	0000      	movs	r0, r0
	...

08000420 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8000424:	2200      	movs	r2, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000426:	4c21      	ldr	r4, [pc, #132]	; (80004ac <_pal_lld_setgroupmode.constprop.0+0x8c>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000428:	2502      	movs	r5, #2
      altrmask = altr << ((bit & 7) * 4);
 800042a:	f04f 0807 	mov.w	r8, #7
      m4 = 15 << ((bit & 7) * 4);
 800042e:	f04f 0e0f 	mov.w	lr, #15
      m1 = 1 << bit;
 8000432:	f04f 0c01 	mov.w	ip, #1
      m2 = 3 << (bit * 2);
 8000436:	2703      	movs	r7, #3
 8000438:	e00f      	b.n	800045a <_pal_lld_setgroupmode.constprop.0+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800043a:	6a21      	ldr	r1, [r4, #32]
 800043c:	ea21 0303 	bic.w	r3, r1, r3
 8000440:	ea43 0309 	orr.w	r3, r3, r9
 8000444:	6223      	str	r3, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8000446:	6823      	ldr	r3, [r4, #0]
 8000448:	ea0a 0a03 	and.w	sl, sl, r3
 800044c:	ea4a 0305 	orr.w	r3, sl, r5
 8000450:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000452:	0840      	lsrs	r0, r0, #1
 8000454:	d028      	beq.n	80004a8 <_pal_lld_setgroupmode.constprop.0+0x88>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000456:	00ad      	lsls	r5, r5, #2
    bit++;
 8000458:	3201      	adds	r2, #1
      m2 = 3 << (bit * 2);
 800045a:	0051      	lsls	r1, r2, #1
      altrmask = altr << ((bit & 7) * 4);
 800045c:	f002 0307 	and.w	r3, r2, #7
 8000460:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
 8000462:	fa07 f101 	lsl.w	r1, r7, r1
    if ((mask & 1) != 0) {
 8000466:	f010 0f01 	tst.w	r0, #1
      altrmask = altr << ((bit & 7) * 4);
 800046a:	fa08 f903 	lsl.w	r9, r8, r3
      m1 = 1 << bit;
 800046e:	fa0c f602 	lsl.w	r6, ip, r2
      m4 = 15 << ((bit & 7) * 4);
 8000472:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000476:	ea6f 0a01 	mvn.w	sl, r1
    if ((mask & 1) != 0) {
 800047a:	d0ea      	beq.n	8000452 <_pal_lld_setgroupmode.constprop.0+0x32>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800047c:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8000480:	ea2b 0606 	bic.w	r6, fp, r6
 8000484:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000486:	68a6      	ldr	r6, [r4, #8]
 8000488:	ea26 0601 	bic.w	r6, r6, r1
 800048c:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800048e:	68e6      	ldr	r6, [r4, #12]
        if (bit < 8)
 8000490:	2a07      	cmp	r2, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000492:	ea26 0101 	bic.w	r1, r6, r1
 8000496:	60e1      	str	r1, [r4, #12]
        if (bit < 8)
 8000498:	d9cf      	bls.n	800043a <_pal_lld_setgroupmode.constprop.0+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800049a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800049c:	ea21 0303 	bic.w	r3, r1, r3
 80004a0:	ea43 0309 	orr.w	r3, r3, r9
 80004a4:	6263      	str	r3, [r4, #36]	; 0x24
 80004a6:	e7ce      	b.n	8000446 <_pal_lld_setgroupmode.constprop.0+0x26>
  }
}
 80004a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004ac:	40020000 	.word	0x40020000

080004b0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80004b0:	2320      	movs	r3, #32
 80004b2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <_port_irq_epilogue+0x44>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80004be:	d102      	bne.n	80004c6 <_port_irq_epilogue+0x16>
 80004c0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80004c4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80004c6:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 80004ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004ce:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 80004d2:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80004d6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <_port_irq_epilogue+0x48>)
 80004dc:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80004de:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80004e0:	6889      	ldr	r1, [r1, #8]
 80004e2:	6892      	ldr	r2, [r2, #8]
 80004e4:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80004e6:	bf8c      	ite	hi
 80004e8:	4a04      	ldrhi	r2, [pc, #16]	; (80004fc <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80004ea:	4a05      	ldrls	r2, [pc, #20]	; (8000500 <_port_irq_epilogue+0x50>)
 80004ec:	f843 2c08 	str.w	r2, [r3, #-8]
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	e000ed00 	.word	0xe000ed00
 80004f8:	20000910 	.word	0x20000910
 80004fc:	08000305 	.word	0x08000305
 8000500:	08000310 	.word	0x08000310
	...

08000510 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {
 8000510:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <trace_next+0x30>)
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <trace_next+0x34>)
 8000516:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000518:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	6a64      	ldr	r4, [r4, #36]	; 0x24
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000520:	605c      	str	r4, [r3, #4]
 8000522:	6840      	ldr	r0, [r0, #4]
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8000524:	f360 211f 	bfi	r1, r0, #8, #24
 8000528:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 800052c:	f502 6104 	add.w	r1, r2, #2112	; 0x840
 8000530:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8000532:	bf28      	it	cs
 8000534:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
  }
}
 8000538:	bc10      	pop	{r4}
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 800053a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000910 	.word	0x20000910
 8000544:	e0001000 	.word	0xe0001000
	...

08000550 <_trace_switch.part.0>:
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000550:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000554:	4905      	ldr	r1, [pc, #20]	; (800056c <_trace_switch.part.0+0x1c>)
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000556:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000558:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8000562:	698b      	ldr	r3, [r1, #24]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000564:	e9c2 3002 	strd	r3, r0, [r2, #8]
    trace_next();
 8000568:	f7ff bfd2 	b.w	8000510 <trace_next>
 800056c:	20000910 	.word	0x20000910

08000570 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000570:	4a09      	ldr	r2, [pc, #36]	; (8000598 <_trace_isr_leave+0x28>)
 8000572:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_leave(const char *isr) {
 8000574:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000576:	f013 0402 	ands.w	r4, r3, #2
 800057a:	d000      	beq.n	800057e <_trace_isr_leave+0xe>
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
    port_unlock_from_isr();
  }
}
 800057c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800057e:	2320      	movs	r3, #32
 8000580:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8000584:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000586:	2203      	movs	r2, #3
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8000588:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 800058a:	701a      	strb	r2, [r3, #0]
    trace_next();
 800058c:	f7ff ffc0 	bl	8000510 <trace_next>
 8000590:	f384 8811 	msr	BASEPRI, r4
}
 8000594:	bd10      	pop	{r4, pc}
 8000596:	bf00      	nop
 8000598:	20000910 	.word	0x20000910
 800059c:	00000000 	.word	0x00000000

080005a0 <_trace_isr_enter>:
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80005a0:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <_trace_isr_enter+0x28>)
 80005a2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_enter(const char *isr) {
 80005a4:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80005a6:	f013 0402 	ands.w	r4, r3, #2
 80005aa:	d000      	beq.n	80005ae <_trace_isr_enter+0xe>
}
 80005ac:	bd10      	pop	{r4, pc}
 80005ae:	2320      	movs	r3, #32
 80005b0:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80005b4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005b6:	2202      	movs	r2, #2
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80005b8:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80005ba:	701a      	strb	r2, [r3, #0]
    trace_next();
 80005bc:	f7ff ffa8 	bl	8000510 <trace_next>
 80005c0:	f384 8811 	msr	BASEPRI, r4
}
 80005c4:	bd10      	pop	{r4, pc}
 80005c6:	bf00      	nop
 80005c8:	20000910 	.word	0x20000910
 80005cc:	00000000 	.word	0x00000000

080005d0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80005d0:	b508      	push	{r3, lr}
 80005d2:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 80005d6:	4d06      	ldr	r5, [pc, #24]	; (80005f0 <chSysHalt+0x20>)
 80005d8:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80005da:	075b      	lsls	r3, r3, #29
 80005dc:	d501      	bpl.n	80005e2 <chSysHalt+0x12>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80005de:	62ec      	str	r4, [r5, #44]	; 0x2c

  /* Halt hook code, usually empty.*/
  CH_CFG_SYSTEM_HALT_HOOK(reason);

  /* Harmless infinite loop.*/
  while (true) {
 80005e0:	e7fe      	b.n	80005e0 <chSysHalt+0x10>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80005e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80005e4:	2204      	movs	r2, #4
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 80005e6:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80005e8:	701a      	strb	r2, [r3, #0]
    trace_next();
 80005ea:	f7ff ff91 	bl	8000510 <trace_next>
 80005ee:	e7f6      	b.n	80005de <chSysHalt+0xe>
 80005f0:	20000910 	.word	0x20000910
	...

08000600 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8000600:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <chDbgCheckClassS+0x18>)
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	b91a      	cbnz	r2, 8000610 <chDbgCheckClassS+0x10>
 8000608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060a:	2b00      	cmp	r3, #0
 800060c:	dd00      	ble.n	8000610 <chDbgCheckClassS+0x10>
    chSysHalt("SV#11");
  }
}
 800060e:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <chDbgCheckClassS+0x1c>)
 8000612:	f7ff ffdd 	bl	80005d0 <chSysHalt>
 8000616:	bf00      	nop
 8000618:	20000910 	.word	0x20000910
 800061c:	080024e4 	.word	0x080024e4

08000620 <chDbgCheckClassI>:
void chDbgCheckClassI(void) {
 8000620:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <chDbgCheckClassI+0x18>)
 8000624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000626:	2a00      	cmp	r2, #0
 8000628:	db03      	blt.n	8000632 <chDbgCheckClassI+0x12>
 800062a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062c:	2b00      	cmp	r3, #0
 800062e:	dd00      	ble.n	8000632 <chDbgCheckClassI+0x12>
}
 8000630:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8000632:	4802      	ldr	r0, [pc, #8]	; (800063c <chDbgCheckClassI+0x1c>)
 8000634:	f7ff ffcc 	bl	80005d0 <chSysHalt>
 8000638:	20000910 	.word	0x20000910
 800063c:	080024ec 	.word	0x080024ec

08000640 <dmaStreamAllocI.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	4604      	mov	r4, r0
 8000644:	460d      	mov	r5, r1
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
  uint32_t i, startid, endid;

  osalDbgCheckClassI();
 8000646:	f7ff ffeb 	bl	8000620 <chDbgCheckClassI>
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 800064a:	482f      	ldr	r0, [pc, #188]	; (8000708 <dmaStreamAllocI.constprop.0+0xc8>)
    uint32_t mask = (1U << i);
 800064c:	2301      	movs	r3, #1
    if ((dma.allocated_mask & mask) == 0U) {
 800064e:	6802      	ldr	r2, [r0, #0]
    uint32_t mask = (1U << i);
 8000650:	40a3      	lsls	r3, r4
    if ((dma.allocated_mask & mask) == 0U) {
 8000652:	4213      	tst	r3, r2

      return dmastp;
    }
  }

  return NULL;
 8000654:	bf18      	it	ne
 8000656:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8000658:	d000      	beq.n	800065c <dmaStreamAllocI.constprop.0+0x1c>
}
 800065a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      dma.streams[i].func  = func;
 800065c:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
      dma.allocated_mask  |= mask;
 8000660:	431a      	orrs	r2, r3
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000662:	492a      	ldr	r1, [pc, #168]	; (800070c <dmaStreamAllocI.constprop.0+0xcc>)
      dma.allocated_mask  |= mask;
 8000664:	6002      	str	r2, [r0, #0]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8000666:	f013 0fff 	tst.w	r3, #255	; 0xff
      dma.streams[i].param = param;
 800066a:	4a29      	ldr	r2, [pc, #164]	; (8000710 <dmaStreamAllocI.constprop.0+0xd0>)
      dma.streams[i].func  = func;
 800066c:	6075      	str	r5, [r6, #4]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800066e:	f04f 000c 	mov.w	r0, #12
      dma.streams[i].param = param;
 8000672:	60b2      	str	r2, [r6, #8]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000674:	fb00 1004 	mla	r0, r0, r4, r1
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8000678:	d009      	beq.n	800068e <dmaStreamAllocI.constprop.0+0x4e>
        rccEnableDMA1(true);
 800067a:	4a26      	ldr	r2, [pc, #152]	; (8000714 <dmaStreamAllocI.constprop.0+0xd4>)
 800067c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800067e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8000682:	6315      	str	r5, [r2, #48]	; 0x30
 8000684:	6d15      	ldr	r5, [r2, #80]	; 0x50
 8000686:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800068a:	6515      	str	r5, [r2, #80]	; 0x50
 800068c:	6d12      	ldr	r2, [r2, #80]	; 0x50
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 800068e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000692:	d009      	beq.n	80006a8 <dmaStreamAllocI.constprop.0+0x68>
        rccEnableDMA2(true);
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <dmaStreamAllocI.constprop.0+0xd4>)
 8000696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000698:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
 800069e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80006a4:	651a      	str	r2, [r3, #80]	; 0x50
 80006a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80006a8:	230c      	movs	r3, #12
 80006aa:	fb03 f304 	mul.w	r3, r3, r4
 80006ae:	58ca      	ldr	r2, [r1, r3]
 80006b0:	6813      	ldr	r3, [r2, #0]
 80006b2:	f023 031f 	bic.w	r3, r3, #31
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	6813      	ldr	r3, [r2, #0]
 80006ba:	f013 0301 	ands.w	r3, r3, #1
 80006be:	d1fb      	bne.n	80006b8 <dmaStreamAllocI.constprop.0+0x78>
 80006c0:	250c      	movs	r5, #12
 80006c2:	fb05 1404 	mla	r4, r5, r4, r1
 80006c6:	263d      	movs	r6, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 80006c8:	7ae5      	ldrb	r5, [r4, #11]
      dmaStreamDisable(dmastp);
 80006ca:	f894 c009 	ldrb.w	ip, [r4, #9]
 80006ce:	6867      	ldr	r7, [r4, #4]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80006d0:	0969      	lsrs	r1, r5, #5
 80006d2:	fa06 f40c 	lsl.w	r4, r6, ip
 80006d6:	0089      	lsls	r1, r1, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80006d8:	f105 4660 	add.w	r6, r5, #3758096384	; 0xe0000000
 80006dc:	603c      	str	r4, [r7, #0]
 80006de:	f506 4661 	add.w	r6, r6, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80006e2:	2401      	movs	r4, #1
 80006e4:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
 80006e8:	f005 051f 	and.w	r5, r5, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	fa04 f505 	lsl.w	r5, r4, r5
 80006f2:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80006f6:	2421      	movs	r4, #33	; 0x21
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80006f8:	23c0      	movs	r3, #192	; 0xc0
 80006fa:	6154      	str	r4, [r2, #20]
 80006fc:	f886 3300 	strb.w	r3, [r6, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000700:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000704:	600d      	str	r5, [r1, #0]
}
 8000706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000708:	200012dc 	.word	0x200012dc
 800070c:	0800282c 	.word	0x0800282c
 8000710:	20000848 	.word	0x20000848
 8000714:	40023800 	.word	0x40023800
	...

08000720 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000722:	460f      	mov	r7, r1
 8000724:	4604      	mov	r4, r0
 8000726:	4615      	mov	r5, r2
  uint8_t *p, *next;

  chDbgCheckClassI();
 8000728:	f7ff ff7a 	bl	8000620 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800072c:	b1b7      	cbz	r7, 800075c <chCoreAllocAlignedWithOffsetI+0x3c>
 800072e:	f107 3cff 	add.w	ip, r7, #4294967295
 8000732:	ea1c 0c07 	ands.w	ip, ip, r7
 8000736:	d111      	bne.n	800075c <chCoreAllocAlignedWithOffsetI+0x3c>

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000738:	490b      	ldr	r1, [pc, #44]	; (8000768 <chCoreAllocAlignedWithOffsetI+0x48>)
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800073a:	e9d1 2600 	ldrd	r2, r6, [r1]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800073e:	1950      	adds	r0, r2, r5
 8000740:	4438      	add	r0, r7
  size = MEM_ALIGN_NEXT(size, align);
 8000742:	1e63      	subs	r3, r4, #1
 8000744:	443b      	add	r3, r7
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000746:	3801      	subs	r0, #1
  size = MEM_ALIGN_NEXT(size, align);
 8000748:	427f      	negs	r7, r7
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800074a:	4038      	ands	r0, r7
  size = MEM_ALIGN_NEXT(size, align);
 800074c:	403b      	ands	r3, r7
  next = p + size;
 800074e:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000750:	429e      	cmp	r6, r3
 8000752:	d306      	bcc.n	8000762 <chCoreAllocAlignedWithOffsetI+0x42>
 8000754:	429a      	cmp	r2, r3
 8000756:	d804      	bhi.n	8000762 <chCoreAllocAlignedWithOffsetI+0x42>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8000758:	600b      	str	r3, [r1, #0]

  return p;
}
 800075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <chCoreAllocAlignedWithOffsetI+0x4c>)
 800075e:	f7ff ff37 	bl	80005d0 <chSysHalt>
    return NULL;
 8000762:	4660      	mov	r0, ip
}
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000766:	bf00      	nop
 8000768:	200012b8 	.word	0x200012b8
 800076c:	08002608 	.word	0x08002608

08000770 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	f7ff bfd5 	b.w	8000720 <chCoreAllocAlignedWithOffsetI>
 8000776:	bf00      	nop
	...

08000780 <chSchReadyAheadI>:
thread_t *chSchReadyAheadI(thread_t *tp) {
 8000780:	b510      	push	{r4, lr}
 8000782:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8000784:	f7ff ff4c 	bl	8000620 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000788:	b1a4      	cbz	r4, 80007b4 <chSchReadyAheadI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800078a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800078e:	b18b      	cbz	r3, 80007b4 <chSchReadyAheadI+0x34>
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d00f      	beq.n	80007b4 <chSchReadyAheadI+0x34>
  tp->state = CH_STATE_READY;
 8000794:	2200      	movs	r2, #0
  } while (cp->prio > tp->prio);
 8000796:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <chSchReadyAheadI+0x3c>)
  tp->state = CH_STATE_READY;
 800079a:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 800079e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	428a      	cmp	r2, r1
 80007a4:	d8fb      	bhi.n	800079e <chSchReadyAheadI+0x1e>
  tp->queue.prev             = cp->queue.prev;
 80007a6:	685a      	ldr	r2, [r3, #4]
}
 80007a8:	4620      	mov	r0, r4
  tp->queue.prev             = cp->queue.prev;
 80007aa:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80007ae:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80007b0:	605c      	str	r4, [r3, #4]
}
 80007b2:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <chSchReadyAheadI+0x40>)
 80007b6:	f7ff ff0b 	bl	80005d0 <chSysHalt>
 80007ba:	bf00      	nop
 80007bc:	20000910 	.word	0x20000910
 80007c0:	080025f4 	.word	0x080025f4
	...

080007d0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 80007d0:	b510      	push	{r4, lr}
 80007d2:	4604      	mov	r4, r0
  chDbgCheckClassI();
 80007d4:	f7ff ff24 	bl	8000620 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80007d8:	b1a4      	cbz	r4, 8000804 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 80007da:	f894 3020 	ldrb.w	r3, [r4, #32]
 80007de:	b18b      	cbz	r3, 8000804 <chSchReadyI+0x34>
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d00f      	beq.n	8000804 <chSchReadyI+0x34>
  tp->state = CH_STATE_READY;
 80007e4:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80007e6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <chSchReadyI+0x3c>)
  tp->state = CH_STATE_READY;
 80007ea:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80007ee:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	428a      	cmp	r2, r1
 80007f4:	d2fb      	bcs.n	80007ee <chSchReadyI+0x1e>
  tp->queue.prev             = cp->queue.prev;
 80007f6:	685a      	ldr	r2, [r3, #4]
}
 80007f8:	4620      	mov	r0, r4
  tp->queue.prev             = cp->queue.prev;
 80007fa:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80007fe:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000800:	605c      	str	r4, [r3, #4]
}
 8000802:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <chSchReadyI+0x40>)
 8000806:	f7ff fee3 	bl	80005d0 <chSysHalt>
 800080a:	bf00      	nop
 800080c:	20000910 	.word	0x20000910
 8000810:	080025d0 	.word	0x080025d0
	...

08000820 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8000820:	b508      	push	{r3, lr}
 8000822:	4603      	mov	r3, r0

  if (*trp != NULL) {
 8000824:	6800      	ldr	r0, [r0, #0]
 8000826:	b168      	cbz	r0, 8000844 <chThdResumeI+0x24>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8000828:	f890 2020 	ldrb.w	r2, [r0, #32]
 800082c:	2a03      	cmp	r2, #3
 800082e:	d106      	bne.n	800083e <chThdResumeI+0x1e>

    *trp = NULL;
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
  }
}
 8000834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tp->u.rdymsg = msg;
 8000838:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800083a:	f7ff bfc9 	b.w	80007d0 <chSchReadyI>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <chThdResumeI+0x28>)
 8000840:	f7ff fec6 	bl	80005d0 <chSysHalt>
}
 8000844:	bd08      	pop	{r3, pc}
 8000846:	bf00      	nop
 8000848:	0800269c 	.word	0x0800269c
 800084c:	00000000 	.word	0x00000000

08000850 <_dbg_check_leave_isr>:
void _dbg_check_leave_isr(void) {
 8000850:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000852:	2320      	movs	r3, #32
 8000854:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <_dbg_check_leave_isr+0x24>)
 800085a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800085c:	2b00      	cmp	r3, #0
 800085e:	dd01      	ble.n	8000864 <_dbg_check_leave_isr+0x14>
 8000860:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000862:	b111      	cbz	r1, 800086a <_dbg_check_leave_isr+0x1a>
    chSysHalt("SV#9");
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <_dbg_check_leave_isr+0x28>)
 8000866:	f7ff feb3 	bl	80005d0 <chSysHalt>
  ch.dbg.isr_cnt--;
 800086a:	3b01      	subs	r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	f381 8811 	msr	BASEPRI, r1
}
 8000872:	bd08      	pop	{r3, pc}
 8000874:	20000910 	.word	0x20000910
 8000878:	080024f4 	.word	0x080024f4
 800087c:	00000000 	.word	0x00000000

08000880 <_dbg_check_enter_isr>:
void _dbg_check_enter_isr(void) {
 8000880:	b508      	push	{r3, lr}
 8000882:	2320      	movs	r3, #32
 8000884:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <_dbg_check_enter_isr+0x24>)
 800088a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800088c:	2b00      	cmp	r3, #0
 800088e:	db01      	blt.n	8000894 <_dbg_check_enter_isr+0x14>
 8000890:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000892:	b111      	cbz	r1, 800089a <_dbg_check_enter_isr+0x1a>
    chSysHalt("SV#8");
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <_dbg_check_enter_isr+0x28>)
 8000896:	f7ff fe9b 	bl	80005d0 <chSysHalt>
  ch.dbg.isr_cnt++;
 800089a:	3301      	adds	r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	f381 8811 	msr	BASEPRI, r1
}
 80008a2:	bd08      	pop	{r3, pc}
 80008a4:	20000910 	.word	0x20000910
 80008a8:	080024fc 	.word	0x080024fc
 80008ac:	00000000 	.word	0x00000000

080008b0 <_dbg_check_unlock_from_isr>:
void _dbg_check_unlock_from_isr(void) {
 80008b0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <_dbg_check_unlock_from_isr+0x1c>)
 80008b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	dd05      	ble.n	80008c6 <_dbg_check_unlock_from_isr+0x16>
 80008ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008bc:	2a00      	cmp	r2, #0
 80008be:	dd02      	ble.n	80008c6 <_dbg_check_unlock_from_isr+0x16>
  _dbg_leave_lock();
 80008c0:	2200      	movs	r2, #0
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008c4:	bd08      	pop	{r3, pc}
    chSysHalt("SV#7");
 80008c6:	4802      	ldr	r0, [pc, #8]	; (80008d0 <_dbg_check_unlock_from_isr+0x20>)
 80008c8:	f7ff fe82 	bl	80005d0 <chSysHalt>
 80008cc:	20000910 	.word	0x20000910
 80008d0:	08002504 	.word	0x08002504
	...

080008e0 <_dbg_check_lock_from_isr>:
void _dbg_check_lock_from_isr(void) {
 80008e0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <_dbg_check_lock_from_isr+0x1c>)
 80008e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	dd01      	ble.n	80008ee <_dbg_check_lock_from_isr+0xe>
 80008ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ec:	b112      	cbz	r2, 80008f4 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <_dbg_check_lock_from_isr+0x20>)
 80008f0:	f7ff fe6e 	bl	80005d0 <chSysHalt>
  _dbg_enter_lock();
 80008f4:	2201      	movs	r2, #1
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008f8:	bd08      	pop	{r3, pc}
 80008fa:	bf00      	nop
 80008fc:	20000910 	.word	0x20000910
 8000900:	0800250c 	.word	0x0800250c
	...

08000910 <wakeup>:
static void wakeup(void *p) {
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	4604      	mov	r4, r0
 8000914:	2320      	movs	r3, #32
 8000916:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800091a:	f7ff ffe1 	bl	80008e0 <_dbg_check_lock_from_isr>
  switch (tp->state) {
 800091e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000922:	2b07      	cmp	r3, #7
 8000924:	d80f      	bhi.n	8000946 <wakeup+0x36>
 8000926:	e8df f003 	tbb	[pc, r3]
 800092a:	0e14      	.short	0x0e14
 800092c:	040a1a0e 	.word	0x040a1a0e
 8000930:	0a0e      	.short	0x0a0e
    chSemFastSignalI(tp->u.wtsemp);
 8000932:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8000934:	f7ff fe74 	bl	8000620 <chDbgCheckClassI>

  sp->cnt++;
 8000938:	68ab      	ldr	r3, [r5, #8]
 800093a:	3301      	adds	r3, #1
 800093c:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800093e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000942:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000944:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800094c:	4620      	mov	r0, r4
 800094e:	f7ff ff3f 	bl	80007d0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000952:	f7ff ffad 	bl	80008b0 <_dbg_check_unlock_from_isr>
 8000956:	2300      	movs	r3, #0
 8000958:	f383 8811 	msr	BASEPRI, r3
}
 800095c:	bd38      	pop	{r3, r4, r5, pc}
    *tp->u.wttrp = NULL;
 800095e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
    break;
 8000964:	e7ef      	b.n	8000946 <wakeup+0x36>
 8000966:	bf00      	nop
	...

08000970 <_idle_thread>:
}
 8000970:	e7fe      	b.n	8000970 <_idle_thread>
 8000972:	bf00      	nop
	...

08000980 <serve_usart_irq>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8000982:	6947      	ldr	r7, [r0, #20]
  uint32_t cr1 = u->CR1;
 8000984:	68fe      	ldr	r6, [r7, #12]

  sr = u->SR;   /* SR reset step 1.*/
 8000986:	683d      	ldr	r5, [r7, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8000988:	687a      	ldr	r2, [r7, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800098a:	f240 130f 	movw	r3, #271	; 0x10f
 800098e:	421d      	tst	r5, r3
static void serve_usart_irq(UARTDriver *uartp) {
 8000990:	4604      	mov	r4, r0
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8000992:	d02d      	beq.n	80009f0 <serve_usart_irq+0x70>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8000994:	6843      	ldr	r3, [r0, #4]
 8000996:	691a      	ldr	r2, [r3, #16]
    u->SR = ~USART_SR_LBD;
 8000998:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800099c:	603b      	str	r3, [r7, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 800099e:	b1ba      	cbz	r2, 80009d0 <serve_usart_irq+0x50>
    sts |= UART_OVERRUN_ERROR;
 80009a0:	f015 0f08 	tst.w	r5, #8
 80009a4:	bf0c      	ite	eq
 80009a6:	2100      	moveq	r1, #0
 80009a8:	2110      	movne	r1, #16
  sr = u->SR;   /* SR reset step 1.*/
 80009aa:	b2ab      	uxth	r3, r5
  if (sr & USART_SR_PE)
 80009ac:	07e8      	lsls	r0, r5, #31
    sts |= UART_PARITY_ERROR;
 80009ae:	bf48      	it	mi
 80009b0:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 80009b4:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 80009b6:	bf48      	it	mi
 80009b8:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 80009bc:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 80009be:	bf48      	it	mi
 80009c0:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 80009c4:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 80009c6:	bf48      	it	mi
 80009c8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80009cc:	4620      	mov	r0, r4
 80009ce:	4790      	blx	r2
 80009d0:	2320      	movs	r3, #32
 80009d2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80009d6:	f7ff ff83 	bl	80008e0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80009da:	f104 000c 	add.w	r0, r4, #12
 80009de:	f06f 0101 	mvn.w	r1, #1
 80009e2:	f7ff ff1d 	bl	8000820 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80009e6:	f7ff ff63 	bl	80008b0 <_dbg_check_unlock_from_isr>
 80009ea:	2300      	movs	r3, #0
 80009ec:	f383 8811 	msr	BASEPRI, r3
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 80009f0:	066a      	lsls	r2, r5, #25
 80009f2:	d50e      	bpl.n	8000a12 <serve_usart_irq+0x92>
 80009f4:	0673      	lsls	r3, r6, #25
 80009f6:	d50c      	bpl.n	8000a12 <serve_usart_irq+0x92>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 80009f8:	6863      	ldr	r3, [r4, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80009fc:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    u->SR = ~USART_SR_TC;
 8000a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000a04:	603a      	str	r2, [r7, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000a06:	60fe      	str	r6, [r7, #12]
    _uart_tx2_isr_code(uartp);
 8000a08:	b10b      	cbz	r3, 8000a0e <serve_usart_irq+0x8e>
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	4798      	blx	r3
 8000a0e:	7a25      	ldrb	r5, [r4, #8]
 8000a10:	b105      	cbz	r5, 8000a14 <serve_usart_irq+0x94>
  }
}
 8000a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a14:	2320      	movs	r3, #32
 8000a16:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000a1a:	f7ff ff61 	bl	80008e0 <_dbg_check_lock_from_isr>
 8000a1e:	4629      	mov	r1, r5
 8000a20:	f104 0010 	add.w	r0, r4, #16
 8000a24:	f7ff fefc 	bl	8000820 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8000a28:	f7ff ff42 	bl	80008b0 <_dbg_check_unlock_from_isr>
 8000a2c:	f385 8811 	msr	BASEPRI, r5
 8000a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a32:	bf00      	nop
	...

08000a40 <uart_lld_serve_tx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000a40:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8000a44:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000a46:	d12e      	bne.n	8000aa6 <uart_lld_serve_tx_end_irq+0x66>
  dmaStreamDisable(uartp->dmatx);
 8000a48:	6a01      	ldr	r1, [r0, #32]
 8000a4a:	680a      	ldr	r2, [r1, #0]
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	f023 031f 	bic.w	r3, r3, #31
 8000a52:	4604      	mov	r4, r0
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	07db      	lsls	r3, r3, #31
 8000a5a:	d4fc      	bmi.n	8000a56 <uart_lld_serve_tx_end_irq+0x16>
 8000a5c:	7a4d      	ldrb	r5, [r1, #9]
 8000a5e:	6848      	ldr	r0, [r1, #4]
  _uart_tx1_isr_code(uartp);
 8000a60:	6862      	ldr	r2, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 8000a62:	233d      	movs	r3, #61	; 0x3d
 8000a64:	40ab      	lsls	r3, r5
  _uart_tx1_isr_code(uartp);
 8000a66:	2102      	movs	r1, #2
  dmaStreamDisable(uartp->dmatx);
 8000a68:	6003      	str	r3, [r0, #0]
  _uart_tx1_isr_code(uartp);
 8000a6a:	7061      	strb	r1, [r4, #1]
 8000a6c:	6813      	ldr	r3, [r2, #0]
 8000a6e:	b1bb      	cbz	r3, 8000aa0 <uart_lld_serve_tx_end_irq+0x60>
 8000a70:	4620      	mov	r0, r4
 8000a72:	4798      	blx	r3
 8000a74:	7863      	ldrb	r3, [r4, #1]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d012      	beq.n	8000aa0 <uart_lld_serve_tx_end_irq+0x60>
 8000a7a:	7a23      	ldrb	r3, [r4, #8]
 8000a7c:	b903      	cbnz	r3, 8000a80 <uart_lld_serve_tx_end_irq+0x40>
}
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
 8000a80:	2320      	movs	r3, #32
 8000a82:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000a86:	f7ff ff2b 	bl	80008e0 <_dbg_check_lock_from_isr>
 8000a8a:	f104 0010 	add.w	r0, r4, #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f7ff fec6 	bl	8000820 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8000a94:	f7ff ff0c 	bl	80008b0 <_dbg_check_unlock_from_isr>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f383 8811 	msr	BASEPRI, r3
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
  _uart_tx1_isr_code(uartp);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	7063      	strb	r3, [r4, #1]
 8000aa4:	e7e9      	b.n	8000a7a <uart_lld_serve_tx_end_irq+0x3a>
  chSysHalt(reason);
 8000aa6:	4801      	ldr	r0, [pc, #4]	; (8000aac <uart_lld_serve_tx_end_irq+0x6c>)
 8000aa8:	f7ff fd92 	bl	80005d0 <chSysHalt>
 8000aac:	08002514 	.word	0x08002514

08000ab0 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000ab0:	f011 0f0c 	tst.w	r1, #12
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8000ab4:	b570      	push	{r4, r5, r6, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000ab6:	d132      	bne.n	8000b1e <uart_lld_serve_rx_end_irq+0x6e>
  if (uartp->rxstate == UART_RX_IDLE) {
 8000ab8:	7883      	ldrb	r3, [r0, #2]
 8000aba:	4604      	mov	r4, r0
 8000abc:	b93b      	cbnz	r3, 8000ace <uart_lld_serve_rx_end_irq+0x1e>
    _uart_rx_idle_code(uartp);
 8000abe:	6843      	ldr	r3, [r0, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	b35b      	cbz	r3, 8000b1c <uart_lld_serve_rx_end_irq+0x6c>
 8000ac4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
}
 8000ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _uart_rx_idle_code(uartp);
 8000aca:	b289      	uxth	r1, r1
 8000acc:	4718      	bx	r3
    dmaStreamDisable(uartp->dmarx);
 8000ace:	69c1      	ldr	r1, [r0, #28]
 8000ad0:	680a      	ldr	r2, [r1, #0]
 8000ad2:	6813      	ldr	r3, [r2, #0]
 8000ad4:	f023 031f 	bic.w	r3, r3, #31
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	07db      	lsls	r3, r3, #31
 8000ade:	d4fc      	bmi.n	8000ada <uart_lld_serve_rx_end_irq+0x2a>
 8000ae0:	7a48      	ldrb	r0, [r1, #9]
 8000ae2:	684d      	ldr	r5, [r1, #4]
    _uart_rx_complete_isr_code(uartp);
 8000ae4:	6861      	ldr	r1, [r4, #4]
    dmaStreamDisable(uartp->dmarx);
 8000ae6:	233d      	movs	r3, #61	; 0x3d
 8000ae8:	4083      	lsls	r3, r0
    _uart_rx_complete_isr_code(uartp);
 8000aea:	2002      	movs	r0, #2
    dmaStreamDisable(uartp->dmarx);
 8000aec:	602b      	str	r3, [r5, #0]
    _uart_rx_complete_isr_code(uartp);
 8000aee:	70a0      	strb	r0, [r4, #2]
 8000af0:	688b      	ldr	r3, [r1, #8]
 8000af2:	b1d3      	cbz	r3, 8000b2a <uart_lld_serve_rx_end_irq+0x7a>
 8000af4:	4620      	mov	r0, r4
 8000af6:	4798      	blx	r3
 8000af8:	78a3      	ldrb	r3, [r4, #2]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d012      	beq.n	8000b24 <uart_lld_serve_rx_end_irq+0x74>
 8000afe:	2320      	movs	r3, #32
 8000b00:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000b04:	f7ff feec 	bl	80008e0 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 8000b08:	f104 000c 	add.w	r0, r4, #12
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f7ff fe87 	bl	8000820 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8000b12:	f7ff fecd 	bl	80008b0 <_dbg_check_unlock_from_isr>
 8000b16:	2300      	movs	r3, #0
 8000b18:	f383 8811 	msr	BASEPRI, r3
}
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
  chSysHalt(reason);
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <uart_lld_serve_rx_end_irq+0xa4>)
 8000b20:	f7ff fd56 	bl	80005d0 <chSysHalt>
 8000b24:	69e3      	ldr	r3, [r4, #28]
 8000b26:	6861      	ldr	r1, [r4, #4]
 8000b28:	681a      	ldr	r2, [r3, #0]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8000b2a:	69a0      	ldr	r0, [r4, #24]
    _uart_rx_complete_isr_code(uartp);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	70a3      	strb	r3, [r4, #2]
  if (uartp->config->rxchar_cb == NULL)
 8000b30:	68cb      	ldr	r3, [r1, #12]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf0c      	ite	eq
 8000b36:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8000b3a:	f44f 7388 	movne.w	r3, #272	; 0x110
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8000b3e:	4303      	orrs	r3, r0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8000b40:	f104 0124 	add.w	r1, r4, #36	; 0x24
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8000b44:	2001      	movs	r0, #1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8000b46:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8000b48:	6050      	str	r0, [r2, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8000b4a:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(uartp->dmarx);
 8000b4c:	6813      	ldr	r3, [r2, #0]
 8000b4e:	4303      	orrs	r3, r0
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e7d4      	b.n	8000afe <uart_lld_serve_rx_end_irq+0x4e>
 8000b54:	08002514 	.word	0x08002514
	...

08000b60 <uartObjectInit>:
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
  uartp->txstate    = UART_TX_IDLE;
  uartp->rxstate    = UART_RX_IDLE;
 8000b60:	2300      	movs	r3, #0
  uartp->state      = UART_STOP;
 8000b62:	2201      	movs	r2, #1
  uartp->config     = NULL;
#if UART_USE_WAIT == TRUE
  uartp->early      = false;
  uartp->threadrx   = NULL;
  uartp->threadtx   = NULL;
 8000b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
  uartp->state      = UART_STOP;
 8000b68:	8002      	strh	r2, [r0, #0]
  uartp->rxstate    = UART_RX_IDLE;
 8000b6a:	7083      	strb	r3, [r0, #2]
  uartp->config     = NULL;
 8000b6c:	6043      	str	r3, [r0, #4]
  uartp->early      = false;
 8000b6e:	7203      	strb	r3, [r0, #8]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
	...

08000b80 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000b80:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000b82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b86:	68da      	ldr	r2, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000b88:	0792      	lsls	r2, r2, #30
 8000b8a:	d501      	bpl.n	8000b90 <stSetAlarm+0x10>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000b8c:	6358      	str	r0, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 8000b8e:	bd08      	pop	{r3, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000b90:	4801      	ldr	r0, [pc, #4]	; (8000b98 <stSetAlarm+0x18>)
 8000b92:	f7ff fd1d 	bl	80005d0 <chSysHalt>
 8000b96:	bf00      	nop
 8000b98:	080026f0 	.word	0x080026f0
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000ba0:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8000ba2:	4c15      	ldr	r4, [pc, #84]	; (8000bf8 <chSchGoSleepS+0x58>)
 8000ba4:	69a5      	ldr	r5, [r4, #24]
void chSchGoSleepS(tstate_t newstate) {
 8000ba6:	4606      	mov	r6, r0
  chDbgCheckClassS();
 8000ba8:	f7ff fd2a 	bl	8000600 <chDbgCheckClassS>
  thread_t *tp = tqp->next;
 8000bac:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 8000bae:	f885 6020 	strb.w	r6, [r5, #32]
  tqp->next             = tp->queue.next;
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8000bb6:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000bb8:	6054      	str	r4, [r2, #4]
 8000bba:	f883 1020 	strb.w	r1, [r3, #32]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8000bbe:	8f22      	ldrh	r2, [r4, #56]	; 0x38
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000bc0:	61a3      	str	r3, [r4, #24]
 8000bc2:	07d3      	lsls	r3, r2, #31
 8000bc4:	d50b      	bpl.n	8000bde <chSchGoSleepS+0x3e>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000bc6:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 8000bca:	69ea      	ldr	r2, [r5, #28]
 8000bcc:	3b24      	subs	r3, #36	; 0x24
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d80e      	bhi.n	8000bf0 <chSchGoSleepS+0x50>
 8000bd2:	69a0      	ldr	r0, [r4, #24]
 8000bd4:	4629      	mov	r1, r5
}
 8000bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 8000bda:	f7ff bb81 	b.w	80002e0 <_port_switch>
 8000bde:	4628      	mov	r0, r5
 8000be0:	f7ff fcb6 	bl	8000550 <_trace_switch.part.0>
 8000be4:	f3ef 8309 	mrs	r3, PSP
 8000be8:	69ea      	ldr	r2, [r5, #28]
 8000bea:	3b24      	subs	r3, #36	; 0x24
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d9f0      	bls.n	8000bd2 <chSchGoSleepS+0x32>
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <chSchGoSleepS+0x5c>)
 8000bf2:	f7ff fced 	bl	80005d0 <chSysHalt>
 8000bf6:	bf00      	nop
 8000bf8:	20000910 	.word	0x20000910
 8000bfc:	08002520 	.word	0x08002520

08000c00 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c04:	460c      	mov	r4, r1
 8000c06:	b087      	sub	sp, #28
 8000c08:	4606      	mov	r6, r0
  chDbgCheckClassS();
 8000c0a:	f7ff fcf9 	bl	8000600 <chDbgCheckClassS>
  if (TIME_INFINITE != timeout) {
 8000c0e:	1c63      	adds	r3, r4, #1
 8000c10:	d046      	beq.n	8000ca0 <chSchGoSleepTimeoutS+0xa0>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000c12:	4f49      	ldr	r7, [pc, #292]	; (8000d38 <chSchGoSleepTimeoutS+0x138>)
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000c14:	46b8      	mov	r8, r7
  chDbgCheckClassI();
 8000c16:	f7ff fd03 	bl	8000620 <chDbgCheckClassI>
 8000c1a:	69bb      	ldr	r3, [r7, #24]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000c1c:	f858 5f1c 	ldr.w	r5, [r8, #28]!
  vtp->par = par;
 8000c20:	9305      	str	r3, [sp, #20]
  return (systime_t)STM32_ST_TIM->CNT;
 8000c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  vtp->func = vtfunc;
 8000c26:	4a45      	ldr	r2, [pc, #276]	; (8000d3c <chSchGoSleepTimeoutS+0x13c>)
 8000c28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c2a:	9204      	str	r2, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000c2c:	4545      	cmp	r5, r8
 8000c2e:	d069      	beq.n	8000d04 <chSchGoSleepTimeoutS+0x104>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8000c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000c32:	1a09      	subs	r1, r1, r0
 8000c34:	1864      	adds	r4, r4, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000c36:	d23c      	bcs.n	8000cb2 <chSchGoSleepTimeoutS+0xb2>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8000c38:	68ab      	ldr	r3, [r5, #8]
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	d35d      	bcc.n	8000cfa <chSchGoSleepTimeoutS+0xfa>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000c3e:	429c      	cmp	r4, r3
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 8000c40:	f10d 0904 	add.w	r9, sp, #4
  while (p->delta < delta) {
 8000c44:	d906      	bls.n	8000c54 <chSchGoSleepTimeoutS+0x54>
    chDbgAssert(p != vtp, "timer already armed");
 8000c46:	454d      	cmp	r5, r9
 8000c48:	d038      	beq.n	8000cbc <chSchGoSleepTimeoutS+0xbc>

    delta -= p->delta;
    p = p->next;
 8000c4a:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 8000c4c:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 8000c4e:	68ab      	ldr	r3, [r5, #8]
 8000c50:	429c      	cmp	r4, r3
 8000c52:	d8f8      	bhi.n	8000c46 <chSchGoSleepTimeoutS+0x46>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000c54:	686b      	ldr	r3, [r5, #4]
 8000c56:	e9cd 5301 	strd	r5, r3, [sp, #4]
  vtp->prev->next = vtp;
 8000c5a:	f8c3 9000 	str.w	r9, [r3]
  p->prev = vtp;
 8000c5e:	f8c5 9004 	str.w	r9, [r5, #4]
  vtp->delta = delta;
 8000c62:	9403      	str	r4, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000c64:	68ab      	ldr	r3, [r5, #8]
 8000c66:	1b1c      	subs	r4, r3, r4

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
  p->delta -= delta;
 8000c6c:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000c70:	4630      	mov	r0, r6
 8000c72:	f7ff ff95 	bl	8000ba0 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000c76:	f7ff fcd3 	bl	8000620 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8000c7a:	9b04      	ldr	r3, [sp, #16]
 8000c7c:	b1a3      	cbz	r3, 8000ca8 <chSchGoSleepTimeoutS+0xa8>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000c7e:	f7ff fccf 	bl	8000620 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d01c      	beq.n	8000cc2 <chSchGoSleepTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000c88:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000c8e:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000c90:	4543      	cmp	r3, r8
    vtp->next->prev = vtp->prev;
 8000c92:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000c94:	d008      	beq.n	8000ca8 <chSchGoSleepTimeoutS+0xa8>
      vtp->next->delta += vtp->delta;
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	9903      	ldr	r1, [sp, #12]
 8000c9a:	440a      	add	r2, r1
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	e003      	b.n	8000ca8 <chSchGoSleepTimeoutS+0xa8>
    chSchGoSleepS(newstate);
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	f7ff ff7d 	bl	8000ba0 <chSchGoSleepS>
 8000ca6:	4f24      	ldr	r7, [pc, #144]	; (8000d38 <chSchGoSleepTimeoutS+0x138>)
  return currp->u.rdymsg;
 8000ca8:	69bb      	ldr	r3, [r7, #24]
}
 8000caa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000cac:	b007      	add	sp, #28
 8000cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      delta -= p->delta;
 8000cb2:	68aa      	ldr	r2, [r5, #8]
      p = p->next;
 8000cb4:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 8000cb6:	1aa4      	subs	r4, r4, r2
 8000cb8:	68ab      	ldr	r3, [r5, #8]
 8000cba:	e7c0      	b.n	8000c3e <chSchGoSleepTimeoutS+0x3e>
    chDbgAssert(p != vtp, "timer already armed");
 8000cbc:	4820      	ldr	r0, [pc, #128]	; (8000d40 <chSchGoSleepTimeoutS+0x140>)
 8000cbe:	f7ff fc87 	bl	80005d0 <chSysHalt>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000cc2:	9a01      	ldr	r2, [sp, #4]
 8000cc4:	61fa      	str	r2, [r7, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8000cc6:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000cc8:	4542      	cmp	r2, r8
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000cca:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->func = NULL;
 8000cce:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000cd0:	d02d      	beq.n	8000d2e <chSchGoSleepTimeoutS+0x12e>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000cd2:	6893      	ldr	r3, [r2, #8]
 8000cd4:	9903      	ldr	r1, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8000cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8000cd8:	440b      	add	r3, r1
 8000cda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000cde:	6093      	str	r3, [r2, #8]
 8000ce0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000ce2:	1a11      	subs	r1, r2, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d9df      	bls.n	8000ca8 <chSchGoSleepTimeoutS+0xa8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000ce8:	1a82      	subs	r2, r0, r2
 8000cea:	441a      	add	r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000cec:	2a01      	cmp	r2, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000cee:	bf98      	it	ls
 8000cf0:	1c8b      	addls	r3, r1, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000cf2:	4418      	add	r0, r3
 8000cf4:	f7ff ff44 	bl	8000b80 <stSetAlarm>
 8000cf8:	e7d6      	b.n	8000ca8 <chSchGoSleepTimeoutS+0xa8>
 8000cfa:	4420      	add	r0, r4
 8000cfc:	f7ff ff40 	bl	8000b80 <stSetAlarm>
 8000d00:	68ab      	ldr	r3, [r5, #8]
 8000d02:	e79c      	b.n	8000c3e <chSchGoSleepTimeoutS+0x3e>
      ch.vtlist.lasttime = now;
 8000d04:	62b9      	str	r1, [r7, #40]	; 0x28
      vtp->delta = delay;
 8000d06:	9403      	str	r4, [sp, #12]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000d08:	68da      	ldr	r2, [r3, #12]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8000d0a:	9501      	str	r5, [sp, #4]
      ch.vtlist.next = vtp;
 8000d0c:	f10d 0904 	add.w	r9, sp, #4
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8000d10:	f012 0202 	ands.w	r2, r2, #2
      ch.vtlist.prev = vtp;
 8000d14:	e9c7 9907 	strd	r9, r9, [r7, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000d18:	9502      	str	r5, [sp, #8]
 8000d1a:	d105      	bne.n	8000d28 <chSchGoSleepTimeoutS+0x128>
  return systime + (systime_t)interval;
 8000d1c:	4421      	add	r1, r4
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d1e:	2002      	movs	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d20:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000d22:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d24:	60d8      	str	r0, [r3, #12]
 8000d26:	e7a3      	b.n	8000c70 <chSchGoSleepTimeoutS+0x70>
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <chSchGoSleepTimeoutS+0x144>)
 8000d2a:	f7ff fc51 	bl	80005d0 <chSysHalt>
  STM32_ST_TIM->DIER = 0;
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	60d3      	str	r3, [r2, #12]
    return;
 8000d34:	e7b8      	b.n	8000ca8 <chSchGoSleepTimeoutS+0xa8>
 8000d36:	bf00      	nop
 8000d38:	20000910 	.word	0x20000910
 8000d3c:	08000911 	.word	0x08000911
 8000d40:	080025dc 	.word	0x080025dc
 8000d44:	080026c8 	.word	0x080026c8
	...

08000d50 <SVC_Handler>:
 8000d50:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8000d54:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000d56:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f383 8811 	msr	BASEPRI, r3
}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
	...

08000d70 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000d70:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8000d72:	4c13      	ldr	r4, [pc, #76]	; (8000dc0 <chSchDoReschedule+0x50>)
  thread_t *tp = tqp->next;
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	69a0      	ldr	r0, [r4, #24]
  tqp->next             = tp->queue.next;
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	6022      	str	r2, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000d7c:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000d7e:	6054      	str	r4, [r2, #4]
 8000d80:	f883 1020 	strb.w	r1, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000d84:	61a3      	str	r3, [r4, #24]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8000d86:	f7ff fcfb 	bl	8000780 <chSchReadyAheadI>
 8000d8a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8000d8c:	07db      	lsls	r3, r3, #31
 8000d8e:	4605      	mov	r5, r0
 8000d90:	d50b      	bpl.n	8000daa <chSchDoReschedule+0x3a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000d92:	f3ef 8309 	mrs	r3, PSP

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000d96:	69ea      	ldr	r2, [r5, #28]
 8000d98:	3b24      	subs	r3, #36	; 0x24
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d80d      	bhi.n	8000dba <chSchDoReschedule+0x4a>
 8000d9e:	69a0      	ldr	r0, [r4, #24]
 8000da0:	4629      	mov	r1, r5
}
 8000da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8000da6:	f7ff ba9b 	b.w	80002e0 <_port_switch>
 8000daa:	f7ff fbd1 	bl	8000550 <_trace_switch.part.0>
 8000dae:	f3ef 8309 	mrs	r3, PSP
 8000db2:	69ea      	ldr	r2, [r5, #28]
 8000db4:	3b24      	subs	r3, #36	; 0x24
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d9f1      	bls.n	8000d9e <chSchDoReschedule+0x2e>
 8000dba:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <chSchDoReschedule+0x54>)
 8000dbc:	f7ff fc08 	bl	80005d0 <chSysHalt>
 8000dc0:	20000910 	.word	0x20000910
 8000dc4:	08002520 	.word	0x08002520
	...

08000dd0 <_dbg_check_unlock>:
void _dbg_check_unlock(void) {
 8000dd0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <_dbg_check_unlock+0x18>)
 8000dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd6:	b922      	cbnz	r2, 8000de2 <_dbg_check_unlock+0x12>
 8000dd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	dd01      	ble.n	8000de2 <_dbg_check_unlock+0x12>
  _dbg_leave_lock();
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000de0:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8000de2:	4802      	ldr	r0, [pc, #8]	; (8000dec <_dbg_check_unlock+0x1c>)
 8000de4:	f7ff fbf4 	bl	80005d0 <chSysHalt>
 8000de8:	20000910 	.word	0x20000910
 8000dec:	08002530 	.word	0x08002530

08000df0 <chSysUnlock.lto_priv.1>:
static inline void chSysUnlock(void) {
 8000df0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 8000df2:	f7ff ffed 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <chSysUnlock.lto_priv.1+0x28>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d004      	beq.n	8000e08 <chSysUnlock.lto_priv.1+0x18>
 8000dfe:	6999      	ldr	r1, [r3, #24]
 8000e00:	6893      	ldr	r3, [r2, #8]
 8000e02:	688a      	ldr	r2, [r1, #8]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d303      	bcc.n	8000e10 <chSysUnlock.lto_priv.1+0x20>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f383 8811 	msr	BASEPRI, r3
}
 8000e0e:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <chSysUnlock.lto_priv.1+0x2c>)
 8000e12:	f7ff fbdd 	bl	80005d0 <chSysHalt>
 8000e16:	bf00      	nop
 8000e18:	20000910 	.word	0x20000910
 8000e1c:	08002588 	.word	0x08002588

08000e20 <_dbg_check_lock>:
void _dbg_check_lock(void) {
 8000e20:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <_dbg_check_lock+0x18>)
 8000e24:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	d002      	beq.n	8000e32 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <_dbg_check_lock+0x1c>)
 8000e2e:	f7ff fbcf 	bl	80005d0 <chSysHalt>
  _dbg_enter_lock();
 8000e32:	2201      	movs	r2, #1
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e36:	bd08      	pop	{r3, pc}
 8000e38:	20000910 	.word	0x20000910
 8000e3c:	08002538 	.word	0x08002538

08000e40 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	2320      	movs	r3, #32
 8000e44:	4604      	mov	r4, r0
 8000e46:	460d      	mov	r5, r1
 8000e48:	4616      	mov	r6, r2
 8000e4a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000e4e:	f7ff ffe7 	bl	8000e20 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 8000e52:	4632      	mov	r2, r6
 8000e54:	4629      	mov	r1, r5
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff fc62 	bl	8000720 <chCoreAllocAlignedWithOffsetI>
 8000e5c:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8000e5e:	f7ff ffb7 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <chCoreAllocAlignedWithOffset+0x44>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d004      	beq.n	8000e74 <chCoreAllocAlignedWithOffset+0x34>
 8000e6a:	6999      	ldr	r1, [r3, #24]
 8000e6c:	6893      	ldr	r3, [r2, #8]
 8000e6e:	688a      	ldr	r2, [r1, #8]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d304      	bcc.n	8000e7e <chCoreAllocAlignedWithOffset+0x3e>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
 8000e7e:	4802      	ldr	r0, [pc, #8]	; (8000e88 <chCoreAllocAlignedWithOffset+0x48>)
 8000e80:	f7ff fba6 	bl	80005d0 <chSysHalt>
 8000e84:	20000910 	.word	0x20000910
 8000e88:	080025a0 	.word	0x080025a0
 8000e8c:	00000000 	.word	0x00000000

08000e90 <sendString>:
 *      Author: Oleksii
 */

#include "user.h"

msg_t sendString(char *str) {
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e92:	4605      	mov	r5, r0
	size_t sz = strlen(str);
 8000e94:	f7ff fa54 	bl	8000340 <strlen>
 */
msg_t uartSendFullTimeout(UARTDriver *uartp, size_t *np,
                          const void *txbuf, sysinterval_t timeout) {
  msg_t msg;

  osalDbgCheck((uartp != NULL) && (*np > 0U) && (txbuf != NULL));
 8000e98:	b340      	cbz	r0, 8000eec <sendString+0x5c>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
 8000ea2:	4e32      	ldr	r6, [pc, #200]	; (8000f6c <sendString+0xdc>)
  _dbg_check_lock();
 8000ea4:	f7ff ffbc 	bl	8000e20 <_dbg_check_lock>
 8000ea8:	7833      	ldrb	r3, [r6, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d11e      	bne.n	8000eec <sendString+0x5c>
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");
 8000eae:	7873      	ldrb	r3, [r6, #1]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d01b      	beq.n	8000eec <sendString+0x5c>
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8000eb4:	6a33      	ldr	r3, [r6, #32]
  dmaStreamSetTransactionSize(uartp->dmatx, n);
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8000eb6:	69b1      	ldr	r1, [r6, #24]
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8000eb8:	681b      	ldr	r3, [r3, #0]
#if UART_USE_WAIT == TRUE
  if ((uartp->config->txend2_cb != NULL) || (uartp->early == false)) {
#else
  if (uartp->config->txend2_cb != NULL) {
#endif
    uartp->usart->SR = ~USART_SR_TC;
 8000eba:	6972      	ldr	r2, [r6, #20]
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8000ebc:	60dd      	str	r5, [r3, #12]

  /* Transmission start.*/
  uartp->early = false;
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	7230      	strb	r0, [r6, #8]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8000ec2:	f441 618a 	orr.w	r1, r1, #1104	; 0x450
    uartp->usart->SR = ~USART_SR_TC;
 8000ec6:	f06f 0040 	mvn.w	r0, #64	; 0x40
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 8000eca:	605c      	str	r4, [r3, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8000ecc:	6019      	str	r1, [r3, #0]
    uartp->usart->SR = ~USART_SR_TC;
 8000ece:	6010      	str	r0, [r2, #0]
    uartp->usart->CR1 |= USART_CR1_TCIE;
 8000ed0:	68d1      	ldr	r1, [r2, #12]
  chDbgAssert(*trp == NULL, "not NULL");
 8000ed2:	6930      	ldr	r0, [r6, #16]
 8000ed4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000ed8:	60d1      	str	r1, [r2, #12]
  }

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmatx);
 8000eda:	681a      	ldr	r2, [r3, #0]
  uart_lld_start_send(uartp, *np, txbuf);
  uartp->txstate = UART_TX_ACTIVE;
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	7071      	strb	r1, [r6, #1]
 8000ee4:	b128      	cbz	r0, 8000ef2 <sendString+0x62>
 8000ee6:	4822      	ldr	r0, [pc, #136]	; (8000f70 <sendString+0xe0>)
 8000ee8:	f7ff fb72 	bl	80005d0 <chSysHalt>
  osalDbgCheck((uartp != NULL) && (*np > 0U) && (txbuf != NULL));
 8000eec:	4821      	ldr	r0, [pc, #132]	; (8000f74 <sendString+0xe4>)
 8000eee:	f7ff fb6f 	bl	80005d0 <chSysHalt>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8000ef2:	4d21      	ldr	r5, [pc, #132]	; (8000f78 <sendString+0xe8>)
  *trp = tp;
 8000ef4:	4633      	mov	r3, r6
 8000ef6:	69aa      	ldr	r2, [r5, #24]
 8000ef8:	f843 2f10 	str.w	r2, [r3, #16]!
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
  tp->u.wttrp = trp;
 8000f00:	6253      	str	r3, [r2, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8000f02:	2003      	movs	r0, #3
 8000f04:	f7ff fe7c 	bl	8000c00 <chSchGoSleepTimeoutS>

  /* Waiting for result.*/
  msg = osalThreadSuspendTimeoutS(&uartp->threadtx, timeout);
  if (msg != MSG_OK) {
 8000f08:	4604      	mov	r4, r0
 8000f0a:	b970      	cbnz	r0, 8000f2a <sendString+0x9a>
  _dbg_check_unlock();
 8000f0c:	f7ff ff60 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	42ab      	cmp	r3, r5
 8000f14:	d004      	beq.n	8000f20 <sendString+0x90>
 8000f16:	69aa      	ldr	r2, [r5, #24]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	6892      	ldr	r2, [r2, #8]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d30c      	bcc.n	8000f3a <sendString+0xaa>
 8000f20:	2300      	movs	r3, #0
 8000f22:	f383 8811 	msr	BASEPRI, r3
	return uartSendFullTimeout(&PORTAB_UART2, &sz, str, TIME_INFINITE);
}
 8000f26:	4620      	mov	r0, r4
 8000f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheckClassI();
 8000f2a:	f7ff fb79 	bl	8000620 <chDbgCheckClassI>
  osalDbgAssert(uartp->state == UART_READY, "not active");
 8000f2e:	7833      	ldrb	r3, [r6, #0]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d005      	beq.n	8000f40 <sendString+0xb0>
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <sendString+0xec>)
 8000f36:	f7ff fb4b 	bl	80005d0 <chSysHalt>
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <sendString+0xf0>)
 8000f3c:	f7ff fb48 	bl	80005d0 <chSysHalt>
  if (uartp->txstate == UART_TX_ACTIVE) {
 8000f40:	7873      	ldrb	r3, [r6, #1]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d1e2      	bne.n	8000f0c <sendString+0x7c>
 *
 * @notapi
 */
size_t uart_lld_stop_send(UARTDriver *uartp) {

  dmaStreamDisable(uartp->dmatx);
 8000f46:	6a31      	ldr	r1, [r6, #32]
 8000f48:	680a      	ldr	r2, [r1, #0]
 8000f4a:	6813      	ldr	r3, [r2, #0]
 8000f4c:	f023 031f 	bic.w	r3, r3, #31
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	6813      	ldr	r3, [r2, #0]
 8000f54:	f013 0301 	ands.w	r3, r3, #1
 8000f58:	d1fb      	bne.n	8000f52 <sendString+0xc2>
 8000f5a:	7a4f      	ldrb	r7, [r1, #9]
 8000f5c:	6848      	ldr	r0, [r1, #4]
 8000f5e:	213d      	movs	r1, #61	; 0x3d
 8000f60:	40b9      	lsls	r1, r7
 8000f62:	6001      	str	r1, [r0, #0]

  return dmaStreamGetTransactionSize(uartp->dmatx);
 8000f64:	6852      	ldr	r2, [r2, #4]
    uartp->txstate = UART_TX_IDLE;
 8000f66:	7073      	strb	r3, [r6, #1]
 8000f68:	e7d0      	b.n	8000f0c <sendString+0x7c>
 8000f6a:	bf00      	nop
 8000f6c:	20000848 	.word	0x20000848
 8000f70:	08002684 	.word	0x08002684
 8000f74:	080027e4 	.word	0x080027e4
 8000f78:	20000910 	.word	0x20000910
 8000f7c:	0800272c 	.word	0x0800272c
 8000f80:	0800257c 	.word	0x0800257c
	...

08000f90 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <main+0x98>)
  PWR->CR |= PWR_CR_DBP;
 8000f92:	4826      	ldr	r0, [pc, #152]	; (800102c <main+0x9c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8000f9a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
}

/*
 * Application entry point.
 */
int main(void) {
 8000f9e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000faa:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8000fac:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8000fb0:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8000fb2:	695a      	ldr	r2, [r3, #20]
 8000fb4:	615c      	str	r4, [r3, #20]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	6959      	ldr	r1, [r3, #20]
 8000fba:	615a      	str	r2, [r3, #20]
 8000fbc:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8000fbe:	6a19      	ldr	r1, [r3, #32]
 8000fc0:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8000fc4:	6219      	str	r1, [r3, #32]
 8000fc6:	6a19      	ldr	r1, [r3, #32]
 8000fc8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000fcc:	6219      	str	r1, [r3, #32]
 8000fce:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8000fd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000fd2:	625c      	str	r4, [r3, #36]	; 0x24
 8000fd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd8:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8000fda:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fdc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fe0:	6419      	str	r1, [r3, #64]	; 0x40
 8000fe2:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8000fe4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fe8:	6619      	str	r1, [r3, #96]	; 0x60
 8000fea:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8000fec:	6801      	ldr	r1, [r0, #0]
 8000fee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000ff2:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8000ff4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000ff6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000ffa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000ffe:	b085      	sub	sp, #20
 8001000:	d003      	beq.n	800100a <main+0x7a>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001002:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001006:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001008:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800100a:	4808      	ldr	r0, [pc, #32]	; (800102c <main+0x9c>)
  dma.allocated_mask = 0U;
 800100c:	4908      	ldr	r1, [pc, #32]	; (8001030 <main+0xa0>)
 800100e:	6842      	ldr	r2, [r0, #4]
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <main+0xa4>)
 8001012:	4c09      	ldr	r4, [pc, #36]	; (8001038 <main+0xa8>)
 8001014:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001018:	2600      	movs	r6, #0
 800101a:	6042      	str	r2, [r0, #4]
 800101c:	460a      	mov	r2, r1
 800101e:	600e      	str	r6, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001020:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8001024:	e00c      	b.n	8001040 <main+0xb0>
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000
 8001030:	200012dc 	.word	0x200012dc
 8001034:	08002838 	.word	0x08002838
 8001038:	40026010 	.word	0x40026010
 800103c:	f853 4c0c 	ldr.w	r4, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001040:	6026      	str	r6, [r4, #0]
    dma.streams[i].func = NULL;
 8001042:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001044:	4299      	cmp	r1, r3
    dma.streams[i].func = NULL;
 8001046:	6056      	str	r6, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001048:	f102 0208 	add.w	r2, r2, #8
 800104c:	d1f6      	bne.n	800103c <main+0xac>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800104e:	49b5      	ldr	r1, [pc, #724]	; (8001324 <main+0x394>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001050:	f8df c34c 	ldr.w	ip, [pc, #844]	; 80013a0 <main+0x410>
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001054:	4ab4      	ldr	r2, [pc, #720]	; (8001328 <main+0x398>)
  uartObjectInit(&UARTD1);
 8001056:	48b5      	ldr	r0, [pc, #724]	; (800132c <main+0x39c>)
  uartObjectInit(&UARTD2);
 8001058:	4db5      	ldr	r5, [pc, #724]	; (8001330 <main+0x3a0>)
  uartObjectInit(&UARTD4);
 800105a:	f8df a348 	ldr.w	sl, [pc, #840]	; 80013a4 <main+0x414>
  uartObjectInit(&UARTD6);
 800105e:	f8df b348 	ldr.w	fp, [pc, #840]	; 80013a8 <main+0x418>
 8001062:	2360      	movs	r3, #96	; 0x60
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001064:	f04f 37ff 	mov.w	r7, #4294967295
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001068:	2440      	movs	r4, #64	; 0x40
 800106a:	f8cc 7008 	str.w	r7, [ip, #8]
 800106e:	f04f 0980 	mov.w	r9, #128	; 0x80
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001072:	f8cc 700c 	str.w	r7, [ip, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001076:	6097      	str	r7, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001078:	60d7      	str	r7, [r2, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800107a:	f881 3306 	strb.w	r3, [r1, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001086:	600c      	str	r4, [r1, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001088:	f44f 7400 	mov.w	r4, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800108c:	f881 3307 	strb.w	r3, [r1, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001090:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001094:	f8c1 9000 	str.w	r9, [r1]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001098:	f881 3308 	strb.w	r3, [r1, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800109c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010a0:	600a      	str	r2, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010a2:	f881 3309 	strb.w	r3, [r1, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010a6:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010aa:	600c      	str	r4, [r1, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010b0:	f881 330a 	strb.w	r3, [r1, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010b4:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010b8:	600c      	str	r4, [r1, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010be:	f881 3317 	strb.w	r3, [r1, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010c2:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010c6:	600c      	str	r4, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010c8:	f881 3328 	strb.w	r3, [r1, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010cc:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010d0:	604a      	str	r2, [r1, #4]
  uartObjectInit(&UARTD1);
 80010d2:	f7ff fd45 	bl	8000b60 <uartObjectInit>
  uartObjectInit(&UARTD3);
 80010d6:	4c97      	ldr	r4, [pc, #604]	; (8001334 <main+0x3a4>)
  UARTD1.usart   = USART1;
 80010d8:	4b97      	ldr	r3, [pc, #604]	; (8001338 <main+0x3a8>)
 80010da:	6143      	str	r3, [r0, #20]
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80010dc:	f04f 0806 	mov.w	r8, #6
  UARTD1.dmatx   = NULL;
 80010e0:	e9c0 6607 	strd	r6, r6, [r0, #28]
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80010e4:	f8c0 8018 	str.w	r8, [r0, #24]
  uartObjectInit(&UARTD2);
 80010e8:	4628      	mov	r0, r5
 80010ea:	f7ff fd39 	bl	8000b60 <uartObjectInit>
  UARTD2.usart   = USART2;
 80010ee:	4b93      	ldr	r3, [pc, #588]	; (800133c <main+0x3ac>)
 80010f0:	616b      	str	r3, [r5, #20]
  uartObjectInit(&UARTD3);
 80010f2:	4620      	mov	r0, r4
  UARTD2.dmarx   = NULL;
 80010f4:	e9c5 8606 	strd	r8, r6, [r5, #24]
  UARTD2.dmatx   = NULL;
 80010f8:	622e      	str	r6, [r5, #32]
  uartObjectInit(&UARTD3);
 80010fa:	f7ff fd31 	bl	8000b60 <uartObjectInit>
  UARTD3.usart   = USART3;
 80010fe:	4b90      	ldr	r3, [pc, #576]	; (8001340 <main+0x3b0>)
 8001100:	6163      	str	r3, [r4, #20]
  UARTD3.dmarx   = NULL;
 8001102:	e9c4 8606 	strd	r8, r6, [r4, #24]
  UARTD3.dmatx   = NULL;
 8001106:	6226      	str	r6, [r4, #32]
  uartObjectInit(&UARTD5);
 8001108:	4c8e      	ldr	r4, [pc, #568]	; (8001344 <main+0x3b4>)
  uartObjectInit(&UARTD4);
 800110a:	4650      	mov	r0, sl
 800110c:	f7ff fd28 	bl	8000b60 <uartObjectInit>
  UARTD4.usart   = UART4;
 8001110:	4b8d      	ldr	r3, [pc, #564]	; (8001348 <main+0x3b8>)
 8001112:	f8ca 3014 	str.w	r3, [sl, #20]
  uartObjectInit(&UARTD5);
 8001116:	4620      	mov	r0, r4
  UARTD4.dmarx   = NULL;
 8001118:	e9ca 8606 	strd	r8, r6, [sl, #24]
  UARTD4.dmatx   = NULL;
 800111c:	f8ca 6020 	str.w	r6, [sl, #32]
  uartObjectInit(&UARTD5);
 8001120:	f7ff fd1e 	bl	8000b60 <uartObjectInit>
  UARTD5.usart   = UART5;
 8001124:	4b89      	ldr	r3, [pc, #548]	; (800134c <main+0x3bc>)
 8001126:	6163      	str	r3, [r4, #20]
  uartObjectInit(&UARTD6);
 8001128:	4658      	mov	r0, fp
  UARTD5.dmatx   = NULL;
 800112a:	e9c4 6607 	strd	r6, r6, [r4, #28]
  UARTD5.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 800112e:	f8c4 8018 	str.w	r8, [r4, #24]
  uartObjectInit(&UARTD6);
 8001132:	f7ff fd15 	bl	8000b60 <uartObjectInit>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001136:	4b86      	ldr	r3, [pc, #536]	; (8001350 <main+0x3c0>)
  UARTD6.dmarx   = NULL;
 8001138:	f8cb 601c 	str.w	r6, [fp, #28]
 800113c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  UARTD6.dmatx   = NULL;
 800113e:	f8cb 6020 	str.w	r6, [fp, #32]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
 8001148:	6e1a      	ldr	r2, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800114a:	4882      	ldr	r0, [pc, #520]	; (8001354 <main+0x3c4>)
  tqp->next = (thread_t *)tqp;
 800114c:	4c82      	ldr	r4, [pc, #520]	; (8001358 <main+0x3c8>)
  ST_ENABLE_CLOCK();
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	661a      	str	r2, [r3, #96]	; 0x60
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 8001156:	6882      	ldr	r2, [r0, #8]
  UARTD6.usart   = USART6;
 8001158:	4b80      	ldr	r3, [pc, #512]	; (800135c <main+0x3cc>)
 800115a:	f8cb 3014 	str.w	r3, [fp, #20]
 800115e:	f042 0201 	orr.w	r2, r2, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 8001166:	6082      	str	r2, [r0, #8]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001168:	f04f 0c01 	mov.w	ip, #1
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 800116c:	487c      	ldr	r0, [pc, #496]	; (8001360 <main+0x3d0>)
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800116e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001174:	62df      	str	r7, [r3, #44]	; 0x2c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  ch.vtlist.delta = (sysinterval_t)-1;
 800117a:	6267      	str	r7, [r4, #36]	; 0x24
  STM32_ST_TIM->CCMR1  = 0;
 800117c:	619e      	str	r6, [r3, #24]
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 800117e:	f104 0740 	add.w	r7, r4, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 8001182:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[0] = 0;
 8001184:	635e      	str	r6, [r3, #52]	; 0x34
  ch.rlist.prio = NOPRIO;
 8001186:	60a6      	str	r6, [r4, #8]
  STM32_ST_TIM->DIER   = 0;
 8001188:	60de      	str	r6, [r3, #12]
  ch.vtlist.lasttime = (systime_t)0;
 800118a:	62a6      	str	r6, [r4, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
 800118c:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800118e:	f8c3 c014 	str.w	ip, [r3, #20]
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8001192:	63a0      	str	r0, [r4, #56]	; 0x38
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001194:	f104 001c 	add.w	r0, r4, #28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001198:	f8c3 c000 	str.w	ip, [r3]
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 800119c:	63e7      	str	r7, [r4, #60]	; 0x3c
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800119e:	f881 931c 	strb.w	r9, [r1, #796]	; 0x31c
 80011a2:	61e0      	str	r0, [r4, #28]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80011a4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80011a8:	6220      	str	r0, [r4, #32]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80011aa:	600a      	str	r2, [r1, #0]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80011ac:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 80011ae:	6024      	str	r4, [r4, #0]
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80011b0:	3201      	adds	r2, #1
 80011b2:	eb04 1302 	add.w	r3, r4, r2, lsl #4
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80011b6:	2a80      	cmp	r2, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80011b8:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80011bc:	f36f 0102 	bfc	r1, #0, #3
 80011c0:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80011c4:	d1f4      	bne.n	80011b0 <main+0x220>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80011c6:	4967      	ldr	r1, [pc, #412]	; (8001364 <main+0x3d4>)
 80011c8:	4b67      	ldr	r3, [pc, #412]	; (8001368 <main+0x3d8>)
  tp->prio      = prio;
 80011ca:	f8c4 2848 	str.w	r2, [r4, #2120]	; 0x848
  tp->realprio  = prio;
 80011ce:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
 80011d2:	4a66      	ldr	r2, [pc, #408]	; (800136c <main+0x3dc>)
 80011d4:	600a      	str	r2, [r1, #0]
 80011d6:	f101 020c 	add.w	r2, r1, #12
  tqp->prev = (thread_t *)tqp;
 80011da:	e9c1 2203 	strd	r2, r2, [r1, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80011de:	f103 0210 	add.w	r2, r3, #16
 80011e2:	611a      	str	r2, [r3, #16]
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 80011e4:	2214      	movs	r2, #20
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
 80011ee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
 80011f4:	221c      	movs	r2, #28
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
 80011f8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80011fe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
 8001204:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
  ch.dbg.isr_cnt  = (cnt_t)0;
 800120a:	2200      	movs	r2, #0
  H_NEXT(&default_heap.header) = NULL;
 800120c:	604a      	str	r2, [r1, #4]
  H_PAGES(&default_heap.header) = 0;
 800120e:	608a      	str	r2, [r1, #8]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8001210:	614a      	str	r2, [r1, #20]
  mp->align = align;
 8001212:	2104      	movs	r1, #4
  ch_memcore.nextmem = __heap_base__;
 8001214:	4e56      	ldr	r6, [pc, #344]	; (8001370 <main+0x3e0>)
 8001216:	61d9      	str	r1, [r3, #28]
 8001218:	6359      	str	r1, [r3, #52]	; 0x34
  mp->provider = provider;
 800121a:	4956      	ldr	r1, [pc, #344]	; (8001374 <main+0x3e4>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4856      	ldr	r0, [pc, #344]	; (8001378 <main+0x3e8>)
 800121e:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  mp->provider = provider;
 8001224:	6219      	str	r1, [r3, #32]
 8001226:	6399      	str	r1, [r3, #56]	; 0x38
 8001228:	e9c3 3300 	strd	r3, r3, [r3]
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <main+0x3ec>)
 800122e:	6033      	str	r3, [r6, #0]
  ch_memcore.endmem  = __heap_end__;
 8001230:	4953      	ldr	r1, [pc, #332]	; (8001380 <main+0x3f0>)
  tp->name      = name;
 8001232:	4b54      	ldr	r3, [pc, #336]	; (8001384 <main+0x3f4>)
 8001234:	6071      	str	r1, [r6, #4]
 8001236:	f8c4 3858 	str.w	r3, [r4, #2136]	; 0x858
  ch.dbg.lock_cnt = (cnt_t)0;
 800123a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  tp->mtxlist   = NULL;
 800123e:	f8c4 2878 	str.w	r2, [r4, #2168]	; 0x878
  tp->epending  = (eventmask_t)0;
 8001242:	f8c4 2874 	str.w	r2, [r4, #2164]	; 0x874
  REG_INSERT(tp);
 8001246:	f8c4 4850 	str.w	r4, [r4, #2128]	; 0x850
 800124a:	68c1      	ldr	r1, [r0, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <main+0x3f8>)
 800124e:	f8c4 4854 	str.w	r4, [r4, #2132]	; 0x854
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	f64f 06ff 	movw	r6, #63743	; 0xf8ff
 8001256:	4031      	ands	r1, r6
  reg_value  =  (reg_value                                   |
 8001258:	430b      	orrs	r3, r1
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800125a:	494c      	ldr	r1, [pc, #304]	; (800138c <main+0x3fc>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800125c:	60c3      	str	r3, [r0, #12]
 800125e:	68cb      	ldr	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001260:	4e4b      	ldr	r6, [pc, #300]	; (8001390 <main+0x400>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001266:	60cb      	str	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001268:	6831      	ldr	r1, [r6, #0]
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <main+0x404>)
 800126c:	6123      	str	r3, [r4, #16]
 800126e:	f041 0101 	orr.w	r1, r1, #1
 8001272:	6031      	str	r1, [r6, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	2610      	movs	r6, #16
 8001276:	2120      	movs	r1, #32
 8001278:	77c6      	strb	r6, [r0, #31]
  tlp->next = (thread_t *)tlp;
 800127a:	f103 0728 	add.w	r7, r3, #40	; 0x28
 800127e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    currp->wabase = &__main_thread_stack_base__;
 8001282:	4e45      	ldr	r6, [pc, #276]	; (8001398 <main+0x408>)
 8001284:	f8c4 7868 	str.w	r7, [r4, #2152]	; 0x868
  tqp->next = (thread_t *)tqp;
 8001288:	f103 002c 	add.w	r0, r3, #44	; 0x2c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800128c:	e9c4 3305 	strd	r3, r3, [r4, #20]
  currp->state = CH_STATE_CURRENT;
 8001290:	2301      	movs	r3, #1
 8001292:	f8c4 086c 	str.w	r0, [r4, #2156]	; 0x86c
  tqp->prev = (thread_t *)tqp;
 8001296:	f8c4 0870 	str.w	r0, [r4, #2160]	; 0x870
    currp->wabase = &__main_thread_stack_base__;
 800129a:	f8c4 685c 	str.w	r6, [r4, #2140]	; 0x85c
  currp->state = CH_STATE_CURRENT;
 800129e:	f8a4 3860 	strh.w	r3, [r4, #2144]	; 0x860
  tp->refs      = (trefs_t)1;
 80012a2:	f884 3862 	strb.w	r3, [r4, #2146]	; 0x862
 80012a6:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("cpsie i" : : : "memory");
 80012aa:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80012ac:	f381 8811 	msr	BASEPRI, r1
  _dbg_check_lock();
 80012b0:	f7ff fdb6 	bl	8000e20 <_dbg_check_lock>
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 80012b4:	6927      	ldr	r7, [r4, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 80012b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012ba:	3301      	adds	r3, #1
 80012bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  _dbg_check_unlock();
 80012c0:	f7ff fd86 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	42a3      	cmp	r3, r4
 80012c8:	d005      	beq.n	80012d6 <main+0x346>
 80012ca:	69a2      	ldr	r2, [r4, #24]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	6892      	ldr	r2, [r2, #8]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f0c0 80d4 	bcc.w	800147e <main+0x4ee>
 80012d6:	f04f 0800 	mov.w	r8, #0
 80012da:	f388 8811 	msr	BASEPRI, r8
#endif
  chSysUnlock();

  return tp;
 80012de:	4e2f      	ldr	r6, [pc, #188]	; (800139c <main+0x40c>)
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	42b3      	cmp	r3, r6
 80012e4:	f000 8087 	beq.w	80013f6 <main+0x466>
 80012e8:	2320      	movs	r3, #32
 80012ea:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80012ee:	f7ff fd97 	bl	8000e20 <_dbg_check_lock>
  ntp = tp->newer;
 80012f2:	f8d7 a010 	ldr.w	sl, [r7, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 80012f6:	45a2      	cmp	sl, r4
 80012f8:	f000 80c7 	beq.w	800148a <main+0x4fa>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 80012fc:	f89a 3022 	ldrb.w	r3, [sl, #34]	; 0x22
 8001300:	2bff      	cmp	r3, #255	; 0xff
 8001302:	f000 80bf 	beq.w	8001484 <main+0x4f4>
    ntp->refs++;
 8001306:	3301      	adds	r3, #1
 8001308:	f88a 3022 	strb.w	r3, [sl, #34]	; 0x22
  _dbg_check_unlock();
 800130c:	f7ff fd60 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	42a3      	cmp	r3, r4
 8001314:	d04a      	beq.n	80013ac <main+0x41c>
 8001316:	69a2      	ldr	r2, [r4, #24]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	6892      	ldr	r2, [r2, #8]
 800131c:	429a      	cmp	r2, r3
 800131e:	f0c0 80ae 	bcc.w	800147e <main+0x4ee>
 8001322:	e043      	b.n	80013ac <main+0x41c>
 8001324:	e000e100 	.word	0xe000e100
 8001328:	40026400 	.word	0x40026400
 800132c:	20000820 	.word	0x20000820
 8001330:	20000848 	.word	0x20000848
 8001334:	20000870 	.word	0x20000870
 8001338:	40011000 	.word	0x40011000
 800133c:	40004400 	.word	0x40004400
 8001340:	40004800 	.word	0x40004800
 8001344:	200008c0 	.word	0x200008c0
 8001348:	40004c00 	.word	0x40004c00
 800134c:	40005000 	.word	0x40005000
 8001350:	40023800 	.word	0x40023800
 8001354:	e0042000 	.word	0xe0042000
 8001358:	20000910 	.word	0x20000910
 800135c:	40011400 	.word	0x40011400
 8001360:	0080fff0 	.word	0x0080fff0
 8001364:	200012c0 	.word	0x200012c0
 8001368:	20001194 	.word	0x20001194
 800136c:	08000e41 	.word	0x08000e41
 8001370:	200012b8 	.word	0x200012b8
 8001374:	08000771 	.word	0x08000771
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	20001360 	.word	0x20001360
 8001380:	20020000 	.word	0x20020000
 8001384:	080028ec 	.word	0x080028ec
 8001388:	05fa0300 	.word	0x05fa0300
 800138c:	e000edf0 	.word	0xe000edf0
 8001390:	e0001000 	.word	0xe0001000
 8001394:	20001150 	.word	0x20001150
 8001398:	20000400 	.word	0x20000400
 800139c:	200011e0 	.word	0x200011e0
 80013a0:	40026000 	.word	0x40026000
 80013a4:	20000898 	.word	0x20000898
 80013a8:	200008e8 	.word	0x200008e8
 80013ac:	f388 8811 	msr	BASEPRI, r8
 80013b0:	2320      	movs	r3, #32
 80013b2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80013b6:	f7ff fd33 	bl	8000e20 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 80013ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d066      	beq.n	8001490 <main+0x500>
  tp->refs--;
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	d014      	beq.n	80013fc <main+0x46c>
  _dbg_check_unlock();
 80013d2:	f7ff fcfd 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	42a3      	cmp	r3, r4
 80013da:	d004      	beq.n	80013e6 <main+0x456>
 80013dc:	69a2      	ldr	r2, [r4, #24]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	6892      	ldr	r2, [r2, #8]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d357      	bcc.n	8001496 <main+0x506>
 80013e6:	f388 8811 	msr	BASEPRI, r8
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 80013ea:	f1ba 0f00 	cmp.w	sl, #0
 80013ee:	f000 80af 	beq.w	8001550 <main+0x5c0>
 80013f2:	4657      	mov	r7, sl
 80013f4:	e774      	b.n	80012e0 <main+0x350>
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 80013f6:	484e      	ldr	r0, [pc, #312]	; (8001530 <main+0x5a0>)
 80013f8:	f7ff f8ea 	bl	80005d0 <chSysHalt>
    REG_REMOVE(tp);
 80013fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	6153      	str	r3, [r2, #20]
  _dbg_check_unlock();
 8001406:	f7ff fce3 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	42a3      	cmp	r3, r4
 800140e:	d004      	beq.n	800141a <main+0x48a>
 8001410:	69a2      	ldr	r2, [r4, #24]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	6892      	ldr	r2, [r2, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	d33d      	bcc.n	8001496 <main+0x506>
 800141a:	f388 8811 	msr	BASEPRI, r8
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 800141e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d038      	beq.n	800149c <main+0x50c>
 800142a:	2b02      	cmp	r3, #2
 800142c:	d1dd      	bne.n	80013ea <main+0x45a>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800142e:	f8d7 9040 	ldr.w	r9, [r7, #64]	; 0x40
 8001432:	69ff      	ldr	r7, [r7, #28]
 8001434:	2320      	movs	r3, #32
 8001436:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800143a:	f7ff fcf1 	bl	8000e20 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 800143e:	f7ff f8ef 	bl	8000620 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 8001442:	f1b9 0f00 	cmp.w	r9, #0
 8001446:	d017      	beq.n	8001478 <main+0x4e8>
 8001448:	b1b7      	cbz	r7, 8001478 <main+0x4e8>
 800144a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800144e:	3b01      	subs	r3, #1
 8001450:	421f      	tst	r7, r3
 8001452:	d111      	bne.n	8001478 <main+0x4e8>
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8001454:	f8d9 3000 	ldr.w	r3, [r9]
 8001458:	603b      	str	r3, [r7, #0]
  mp->next = php;
 800145a:	f8c9 7000 	str.w	r7, [r9]
  _dbg_check_unlock();
 800145e:	f7ff fcb7 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	42a3      	cmp	r3, r4
 8001466:	d0be      	beq.n	80013e6 <main+0x456>
 8001468:	69a2      	ldr	r2, [r4, #24]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	6892      	ldr	r2, [r2, #8]
 800146e:	429a      	cmp	r2, r3
 8001470:	d2b9      	bcs.n	80013e6 <main+0x456>
 8001472:	4830      	ldr	r0, [pc, #192]	; (8001534 <main+0x5a4>)
 8001474:	f7ff f8ac 	bl	80005d0 <chSysHalt>
  chDbgCheck((mp != NULL) &&
 8001478:	482f      	ldr	r0, [pc, #188]	; (8001538 <main+0x5a8>)
 800147a:	f7ff f8a9 	bl	80005d0 <chSysHalt>
 800147e:	482f      	ldr	r0, [pc, #188]	; (800153c <main+0x5ac>)
 8001480:	f7ff f8a6 	bl	80005d0 <chSysHalt>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8001484:	482e      	ldr	r0, [pc, #184]	; (8001540 <main+0x5b0>)
 8001486:	f7ff f8a3 	bl	80005d0 <chSysHalt>
    ntp = NULL;
 800148a:	f04f 0a00 	mov.w	sl, #0
 800148e:	e73d      	b.n	800130c <main+0x37c>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8001490:	482c      	ldr	r0, [pc, #176]	; (8001544 <main+0x5b4>)
 8001492:	f7ff f89d 	bl	80005d0 <chSysHalt>
 8001496:	482c      	ldr	r0, [pc, #176]	; (8001548 <main+0x5b8>)
 8001498:	f7ff f89a 	bl	80005d0 <chSysHalt>
      chHeapFree(chThdGetWorkingAreaX(tp));
 800149c:	69ff      	ldr	r7, [r7, #28]
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 800149e:	2f00      	cmp	r7, #0
 80014a0:	f000 8272 	beq.w	8001988 <main+0x9f8>
 80014a4:	077b      	lsls	r3, r7, #29
 80014a6:	f040 826f 	bne.w	8001988 <main+0x9f8>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 80014aa:	e957 9302 	ldrd	r9, r3, [r7, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80014ae:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80014b0:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80014b2:	f847 3c04 	str.w	r3, [r7, #-4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80014b6:	f109 0b0c 	add.w	fp, r9, #12
 80014ba:	2320      	movs	r3, #32
 80014bc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80014c0:	f7ff fcae 	bl	8000e20 <_dbg_check_lock>
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;

  chDbgCheckClassS();
 80014c4:	f7ff f89c 	bl	8000600 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80014c8:	f8d9 0014 	ldr.w	r0, [r9, #20]
  thread_t *ctp = currp;
 80014cc:	69a1      	ldr	r1, [r4, #24]
  if (mp->owner != NULL) {
 80014ce:	2800      	cmp	r0, #0
 80014d0:	f000 81fd 	beq.w	80018ce <main+0x93e>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 80014d4:	688a      	ldr	r2, [r1, #8]
 80014d6:	6883      	ldr	r3, [r0, #8]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d90b      	bls.n	80014f4 <main+0x564>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80014dc:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 80014e0:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	f000 81d7 	beq.w	8001896 <main+0x906>
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	f000 8159 	beq.w	80017a0 <main+0x810>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8149 	beq.w	8001786 <main+0x7f6>
 80014f4:	465a      	mov	r2, fp
 80014f6:	e003      	b.n	8001500 <main+0x570>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80014f8:	6890      	ldr	r0, [r2, #8]
 80014fa:	688b      	ldr	r3, [r1, #8]
 80014fc:	4298      	cmp	r0, r3
 80014fe:	d302      	bcc.n	8001506 <main+0x576>
    cp = cp->queue.next;
 8001500:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001502:	4593      	cmp	fp, r2
 8001504:	d1f8      	bne.n	80014f8 <main+0x568>
  tp->queue.prev             = cp->queue.prev;
 8001506:	6853      	ldr	r3, [r2, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
 8001508:	9101      	str	r1, [sp, #4]
 800150a:	e9c1 2300 	strd	r2, r3, [r1]
      chSchGoSleepS(CH_STATE_WTMTX);
 800150e:	2006      	movs	r0, #6
  tp->queue.prev->queue.next = tp;
 8001510:	6019      	str	r1, [r3, #0]
  cp->queue.prev             = tp;
 8001512:	6051      	str	r1, [r2, #4]
      ctp->u.wtmtxp = mp;
 8001514:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8001518:	f7ff fb42 	bl	8000ba0 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 800151c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8001520:	9901      	ldr	r1, [sp, #4]
 8001522:	4299      	cmp	r1, r3
 8001524:	f000 8244 	beq.w	80019b0 <main+0xa20>
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <main+0x5bc>)
 800152a:	f7ff f851 	bl	80005d0 <chSysHalt>
 800152e:	bf00      	nop
 8001530:	08002628 	.word	0x08002628
 8001534:	080025ac 	.word	0x080025ac
 8001538:	08002634 	.word	0x08002634
 800153c:	080025c4 	.word	0x080025c4
 8001540:	080026ac 	.word	0x080026ac
 8001544:	08002668 	.word	0x08002668
 8001548:	08002588 	.word	0x08002588
 800154c:	080025e8 	.word	0x080025e8
  } while (ctp != NULL);
 8001550:	4ba3      	ldr	r3, [pc, #652]	; (80017e0 <main+0x850>)
 8001552:	27d8      	movs	r7, #216	; 0xd8
    *startp++ = v;
 8001554:	2255      	movs	r2, #85	; 0x55
  while (startp < endp) {
 8001556:	3f01      	subs	r7, #1
    *startp++ = v;
 8001558:	f803 2b01 	strb.w	r2, [r3], #1
  while (startp < endp) {
 800155c:	d1fb      	bne.n	8001556 <main+0x5c6>
 800155e:	2320      	movs	r3, #32
 8001560:	f383 8811 	msr	BASEPRI, r3
 8001564:	f7ff fc5c 	bl	8000e20 <_dbg_check_lock>
  chDbgCheckClassI();
 8001568:	f7ff f85a 	bl	8000620 <chDbgCheckClassI>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800156c:	4a9d      	ldr	r2, [pc, #628]	; (80017e4 <main+0x854>)
 800156e:	4b9e      	ldr	r3, [pc, #632]	; (80017e8 <main+0x858>)
 8001570:	66f2      	str	r2, [r6, #108]	; 0x6c
  tp->state     = CH_STATE_WTSTART;
 8001572:	2202      	movs	r2, #2
  REG_INSERT(tp);
 8001574:	6961      	ldr	r1, [r4, #20]
  tp->state     = CH_STATE_WTSTART;
 8001576:	f8a6 20b0 	strh.w	r2, [r6, #176]	; 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800157a:	489c      	ldr	r0, [pc, #624]	; (80017ec <main+0x85c>)
 800157c:	6737      	str	r7, [r6, #112]	; 0x70
  tp->prio      = prio;
 800157e:	2201      	movs	r2, #1
 8001580:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
  tp->epending  = (eventmask_t)0;
 8001584:	e9c6 7731 	strd	r7, r7, [r6, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001588:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
  REG_INSERT(tp);
 800158c:	f103 0724 	add.w	r7, r3, #36	; 0x24
  tp->name      = name;
 8001590:	4897      	ldr	r0, [pc, #604]	; (80017f0 <main+0x860>)
  tp->realprio  = prio;
 8001592:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
  tp->refs      = (trefs_t)1;
 8001596:	f886 20b2 	strb.w	r2, [r6, #178]	; 0xb2
  tlp->next = (thread_t *)tlp;
 800159a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
  tqp->next = (thread_t *)tqp;
 800159e:	3350      	adds	r3, #80	; 0x50
  tp->name      = name;
 80015a0:	f8c6 00a8 	str.w	r0, [r6, #168]	; 0xa8
  tp->wabase = tdp->wbase;
 80015a4:	f8c6 60ac 	str.w	r6, [r6, #172]	; 0xac
  REG_INSERT(tp);
 80015a8:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
 80015ac:	f8c6 10a4 	str.w	r1, [r6, #164]	; 0xa4
 80015b0:	610f      	str	r7, [r1, #16]
 80015b2:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 80015b6:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 80015ba:	6167      	str	r7, [r4, #20]
  chDbgCheckClassS();
 80015bc:	f7ff f820 	bl	8000600 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80015c0:	6823      	ldr	r3, [r4, #0]
  thread_t *otp = currp;
 80015c2:	69a0      	ldr	r0, [r4, #24]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80015c4:	42a3      	cmp	r3, r4
 80015c6:	d004      	beq.n	80015d2 <main+0x642>
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	6882      	ldr	r2, [r0, #8]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	f0c0 8103 	bcc.w	80017d8 <main+0x848>
  ntp->u.rdymsg = msg;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
 80015d8:	6883      	ldr	r3, [r0, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 81ed 	beq.w	80019ba <main+0xa2a>
    (void) chSchReadyI(ntp);
 80015e0:	4884      	ldr	r0, [pc, #528]	; (80017f4 <main+0x864>)
 80015e2:	f7ff f8f5 	bl	80007d0 <chSchReadyI>
  chSysUnlock();
 80015e6:	f7ff fc03 	bl	8000df0 <chSysUnlock.lto_priv.1>
/* Module exported functions.                                                */
/*===========================================================================*/

void portab_setup(void) {

  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 80015ea:	2004      	movs	r0, #4
 80015ec:	f7fe ff18 	bl	8000420 <_pal_lld_setgroupmode.constprop.0>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 80015f0:	2008      	movs	r0, #8
 80015f2:	f7fe ff15 	bl	8000420 <_pal_lld_setgroupmode.constprop.0>
 80015f6:	2620      	movs	r6, #32
 80015f8:	f386 8811 	msr	BASEPRI, r6
 80015fc:	f7ff fc10 	bl	8000e20 <_dbg_check_lock>
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001600:	f241 3188 	movw	r1, #5000	; 0x1388
 8001604:	2008      	movs	r0, #8
 8001606:	f7ff fafb 	bl	8000c00 <chSchGoSleepTimeoutS>
  chSysUnlock();
 800160a:	f7ff fbf1 	bl	8000df0 <chSysUnlock.lto_priv.1>
 800160e:	f386 8811 	msr	BASEPRI, r6
 8001612:	f7ff fc05 	bl	8000e20 <_dbg_check_lock>
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
 8001616:	782b      	ldrb	r3, [r5, #0]
 8001618:	1e5a      	subs	r2, r3, #1
 800161a:	2a01      	cmp	r2, #1
 800161c:	f200 8154 	bhi.w	80018c8 <main+0x938>
  uartp->config = config;
 8001620:	4a75      	ldr	r2, [pc, #468]	; (80017f8 <main+0x868>)
 8001622:	606a      	str	r2, [r5, #4]
  if (uartp->state == UART_STOP) {
 8001624:	2b01      	cmp	r3, #1
 8001626:	f000 80fb 	beq.w	8001820 <main+0x890>
  uartp->rxstate = UART_RX_IDLE;
 800162a:	2300      	movs	r3, #0
  dmaStreamDisable(uartp->dmarx);
 800162c:	69ea      	ldr	r2, [r5, #28]
  uartp->rxstate = UART_RX_IDLE;
 800162e:	70ab      	strb	r3, [r5, #2]
  uartp->txstate = UART_TX_IDLE;
 8001630:	706b      	strb	r3, [r5, #1]
  dmaStreamDisable(uartp->dmarx);
 8001632:	6811      	ldr	r1, [r2, #0]
  USART_TypeDef *u = uartp->usart;
 8001634:	696b      	ldr	r3, [r5, #20]
  dmaStreamDisable(uartp->dmarx);
 8001636:	6808      	ldr	r0, [r1, #0]
 8001638:	f020 001f 	bic.w	r0, r0, #31
 800163c:	6008      	str	r0, [r1, #0]
 800163e:	6808      	ldr	r0, [r1, #0]
 8001640:	07c0      	lsls	r0, r0, #31
 8001642:	d4fc      	bmi.n	800163e <main+0x6ae>
 8001644:	7a56      	ldrb	r6, [r2, #9]
  dmaStreamDisable(uartp->dmatx);
 8001646:	6a28      	ldr	r0, [r5, #32]
  dmaStreamDisable(uartp->dmarx);
 8001648:	6857      	ldr	r7, [r2, #4]
 800164a:	223d      	movs	r2, #61	; 0x3d
 800164c:	40b2      	lsls	r2, r6
  dmaStreamDisable(uartp->dmatx);
 800164e:	6806      	ldr	r6, [r0, #0]
  dmaStreamDisable(uartp->dmarx);
 8001650:	603a      	str	r2, [r7, #0]
  dmaStreamDisable(uartp->dmatx);
 8001652:	6832      	ldr	r2, [r6, #0]
 8001654:	f022 021f 	bic.w	r2, r2, #31
 8001658:	6032      	str	r2, [r6, #0]
 800165a:	6832      	ldr	r2, [r6, #0]
 800165c:	f012 0201 	ands.w	r2, r2, #1
 8001660:	d1fb      	bne.n	800165a <main+0x6ca>
 8001662:	f890 c009 	ldrb.w	ip, [r0, #9]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8001666:	4e65      	ldr	r6, [pc, #404]	; (80017fc <main+0x86c>)
  dmaStreamDisable(uartp->dmatx);
 8001668:	6847      	ldr	r7, [r0, #4]
 800166a:	203d      	movs	r0, #61	; 0x3d
 800166c:	fa00 f00c 	lsl.w	r0, r0, ip
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8001670:	42b3      	cmp	r3, r6
  dmaStreamDisable(uartp->dmatx);
 8001672:	6038      	str	r0, [r7, #0]
  uartp->usart->CR1 = 0;
 8001674:	60da      	str	r2, [r3, #12]
    fck = STM32_PCLK2 / uartp->config->speed;
 8001676:	6868      	ldr	r0, [r5, #4]
  uartp->usart->CR2 = 0;
 8001678:	611a      	str	r2, [r3, #16]
  uartp->usart->CR3 = 0;
 800167a:	615a      	str	r2, [r3, #20]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 800167c:	f000 817c 	beq.w	8001978 <main+0x9e8>
 8001680:	4a5f      	ldr	r2, [pc, #380]	; (8001800 <main+0x870>)
 8001682:	4293      	cmp	r3, r2
 8001684:	f000 8178 	beq.w	8001978 <main+0x9e8>
    fck = STM32_PCLK1 / uartp->config->speed;
 8001688:	4a5e      	ldr	r2, [pc, #376]	; (8001804 <main+0x874>)
 800168a:	6940      	ldr	r0, [r0, #20]
 800168c:	fbb2 f2f0 	udiv	r2, r2, r0
  if (uartp->config->cr1 & USART_CR1_OVER8)
 8001690:	6868      	ldr	r0, [r5, #4]
 8001692:	f9b0 6018 	ldrsh.w	r6, [r0, #24]
 8001696:	f8b0 e018 	ldrh.w	lr, [r0, #24]
 800169a:	2e00      	cmp	r6, #0
 800169c:	da05      	bge.n	80016aa <main+0x71a>
    fck = ((fck & ~7) * 2) | (fck & 7);
 800169e:	f022 0607 	bic.w	r6, r2, #7
 80016a2:	f002 0207 	and.w	r2, r2, #7
 80016a6:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
  if (uartp->config->rxchar_cb == NULL)
 80016aa:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80016ae:	8b47      	ldrh	r7, [r0, #26]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80016b0:	8b86      	ldrh	r6, [r0, #28]
  u->BRR = fck;
 80016b2:	609a      	str	r2, [r3, #8]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 80016b4:	f1bc 0f00 	cmp.w	ip, #0
  u->SR = 0;
 80016b8:	f04f 0000 	mov.w	r0, #0
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80016bc:	f8d5 c018 	ldr.w	ip, [r5, #24]
  (void)u->SR;  /* SR reset step 1.*/
 80016c0:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80016c2:	685a      	ldr	r2, [r3, #4]
  u->SR = 0;
 80016c4:	6018      	str	r0, [r3, #0]
  u->CR1 = uartp->config->cr1 | cr1;
 80016c6:	f44e 5204 	orr.w	r2, lr, #8448	; 0x2100
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 80016ca:	bf0c      	ite	eq
 80016cc:	f44f 7080 	moveq.w	r0, #256	; 0x100
 80016d0:	f44f 7088 	movne.w	r0, #272	; 0x110
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80016d4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 80016d8:	611f      	str	r7, [r3, #16]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80016da:	ea40 000c 	orr.w	r0, r0, ip
  u->CR1 = uartp->config->cr1 | cr1;
 80016de:	f042 020c 	orr.w	r2, r2, #12
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80016e2:	f8df c138 	ldr.w	ip, [pc, #312]	; 800181c <main+0x88c>
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80016e6:	2701      	movs	r7, #1
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80016e8:	f046 06c1 	orr.w	r6, r6, #193	; 0xc1
 80016ec:	615e      	str	r6, [r3, #20]
  u->CR1 = uartp->config->cr1 | cr1;
 80016ee:	60da      	str	r2, [r3, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80016f0:	f8c1 c00c 	str.w	ip, [r1, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 80016f4:	604f      	str	r7, [r1, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 80016f6:	6008      	str	r0, [r1, #0]
  dmaStreamEnable(uartp->dmarx);
 80016f8:	680b      	ldr	r3, [r1, #0]
 80016fa:	433b      	orrs	r3, r7
 80016fc:	600b      	str	r3, [r1, #0]
  uartp->state = UART_READY;
 80016fe:	2302      	movs	r3, #2
 8001700:	702b      	strb	r3, [r5, #0]
  _dbg_check_unlock();
 8001702:	f7ff fb65 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	42a3      	cmp	r3, r4
 800170a:	d005      	beq.n	8001718 <main+0x788>
 800170c:	69a2      	ldr	r2, [r4, #24]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	6892      	ldr	r2, [r2, #8]
 8001712:	429a      	cmp	r2, r3
 8001714:	f0c0 8135 	bcc.w	8001982 <main+0x9f2>
 8001718:	2300      	movs	r3, #0
 800171a:	f383 8811 	msr	BASEPRI, r3
   */
  chThdSleepMilliseconds(500);
  uartStart(&PORTAB_UART2, &uart_cfg_2);


  msg = sendString("Hi! I'm here again.\n");
 800171e:	483a      	ldr	r0, [pc, #232]	; (8001808 <main+0x878>)
 8001720:	f7ff fbb6 	bl	8000e90 <sendString>
  if (msg == MSG_OK)
 8001724:	b918      	cbnz	r0, 800172e <main+0x79e>
	  setLED(ORANGE);
 8001726:	4b39      	ldr	r3, [pc, #228]	; (800180c <main+0x87c>)
 8001728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172c:	831a      	strh	r2, [r3, #24]
  /*
   * Normal main() thread activity.
   */
  while (true) {
    chThdSleepMilliseconds(500);
    toggleLED(BLUE);
 800172e:	4d37      	ldr	r5, [pc, #220]	; (800180c <main+0x87c>)
    resetLED(ORANGE);
    if (getUserButton()) {
 8001730:	4e37      	ldr	r6, [pc, #220]	; (8001810 <main+0x880>)
 8001732:	2720      	movs	r7, #32
 8001734:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8001738:	f7ff fb72 	bl	8000e20 <_dbg_check_lock>
 800173c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001740:	2008      	movs	r0, #8
 8001742:	f7ff fa5d 	bl	8000c00 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 8001746:	f7ff fb43 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	42a3      	cmp	r3, r4
 800174e:	d005      	beq.n	800175c <main+0x7cc>
 8001750:	69a2      	ldr	r2, [r4, #24]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	6892      	ldr	r2, [r2, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	f4ff ae9d 	bcc.w	8001496 <main+0x506>
 800175c:	2300      	movs	r3, #0
 800175e:	f383 8811 	msr	BASEPRI, r3
    toggleLED(BLUE);
 8001762:	696b      	ldr	r3, [r5, #20]
    resetLED(ORANGE);
 8001764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    toggleLED(BLUE);
 8001768:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800176c:	616b      	str	r3, [r5, #20]
    resetLED(ORANGE);
 800176e:	836a      	strh	r2, [r5, #26]
    if (getUserButton()) {
 8001770:	6933      	ldr	r3, [r6, #16]
 8001772:	07db      	lsls	r3, r3, #31
 8001774:	d5de      	bpl.n	8001734 <main+0x7a4>
    	toggleLED(GREEN);
 8001776:	696b      	ldr	r3, [r5, #20]
    	sendString("Button has been pressed.\n");
 8001778:	4826      	ldr	r0, [pc, #152]	; (8001814 <main+0x884>)
    	toggleLED(GREEN);
 800177a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800177e:	616b      	str	r3, [r5, #20]
    	sendString("Button has been pressed.\n");
 8001780:	f7ff fb86 	bl	8000e90 <sendString>
 8001784:	e7d5      	b.n	8001732 <main+0x7a2>
  tp->queue.prev->queue.next = tp->queue.next;
 8001786:	e9d0 3200 	ldrd	r3, r2, [r0]
          tp->state = CH_STATE_CURRENT;
 800178a:	f04f 0c01 	mov.w	ip, #1
 800178e:	f880 c020 	strb.w	ip, [r0, #32]
 8001792:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	9101      	str	r1, [sp, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8001798:	f7ff f81a 	bl	80007d0 <chSchReadyI>
          break;
 800179c:	9901      	ldr	r1, [sp, #4]
 800179e:	e6a9      	b.n	80014f4 <main+0x564>
  tp->queue.prev->queue.next = tp->queue.next;
 80017a0:	e9d0 3c00 	ldrd	r3, ip, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80017a4:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 80017a8:	f8cc 3000 	str.w	r3, [ip]
  thread_t *cp = (thread_t *)tqp;
 80017ac:	e9cd 1201 	strd	r1, r2, [sp, #4]
  tp->queue.next->queue.prev = tp->queue.prev;
 80017b0:	f8c3 c004 	str.w	ip, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80017b4:	4673      	mov	r3, lr
 80017b6:	e003      	b.n	80017c0 <main+0x830>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	9902      	ldr	r1, [sp, #8]
 80017bc:	4291      	cmp	r1, r2
 80017be:	d802      	bhi.n	80017c6 <main+0x836>
    cp = cp->queue.next;
 80017c0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80017c2:	459e      	cmp	lr, r3
 80017c4:	d1f8      	bne.n	80017b8 <main+0x828>
 80017c6:	469c      	mov	ip, r3
  tp->queue.prev             = cp->queue.prev;
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	9901      	ldr	r1, [sp, #4]
 80017cc:	e9c0 c300 	strd	ip, r3, [r0]
  tp->queue.prev->queue.next = tp;
 80017d0:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 80017d2:	f8cc 0004 	str.w	r0, [ip, #4]
 80017d6:	e68d      	b.n	80014f4 <main+0x564>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80017d8:	480f      	ldr	r0, [pc, #60]	; (8001818 <main+0x888>)
 80017da:	f7fe fef9 	bl	80005d0 <chSysHalt>
 80017de:	bf00      	nop
 80017e0:	200011e0 	.word	0x200011e0
 80017e4:	08000971 	.word	0x08000971
 80017e8:	2000124c 	.word	0x2000124c
 80017ec:	080002f1 	.word	0x080002f1
 80017f0:	08002540 	.word	0x08002540
 80017f4:	20001270 	.word	0x20001270
 80017f8:	20000800 	.word	0x20000800
 80017fc:	40011000 	.word	0x40011000
 8001800:	40011400 	.word	0x40011400
 8001804:	0280de80 	.word	0x0280de80
 8001808:	08002548 	.word	0x08002548
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40020000 	.word	0x40020000
 8001814:	08002560 	.word	0x08002560
 8001818:	08002658 	.word	0x08002658
 800181c:	2000086c 	.word	0x2000086c
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART2_RX_DMA_STREAM,
 8001820:	4995      	ldr	r1, [pc, #596]	; (8001a78 <main+0xae8>)
 8001822:	2005      	movs	r0, #5
 8001824:	f7fe ff0c 	bl	8000640 <dmaStreamAllocI.constprop.0>
 8001828:	61e8      	str	r0, [r5, #28]
      osalDbgAssert(uartp->dmarx != NULL, "unable to allocate stream");
 800182a:	2800      	cmp	r0, #0
 800182c:	d030      	beq.n	8001890 <main+0x900>
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART2_TX_DMA_STREAM,
 800182e:	4993      	ldr	r1, [pc, #588]	; (8001a7c <main+0xaec>)
 8001830:	2006      	movs	r0, #6
 8001832:	f7fe ff05 	bl	8000640 <dmaStreamAllocI.constprop.0>
 8001836:	4602      	mov	r2, r0
 8001838:	6228      	str	r0, [r5, #32]
      osalDbgAssert(uartp->dmatx != NULL, "unable to allocate stream");
 800183a:	b348      	cbz	r0, 8001890 <main+0x900>
      rccEnableUSART2(true);
 800183c:	4b90      	ldr	r3, [pc, #576]	; (8001a80 <main+0xaf0>)
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 800183e:	686e      	ldr	r6, [r5, #4]
      rccEnableUSART2(true);
 8001840:	6c19      	ldr	r1, [r3, #64]	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001842:	4890      	ldr	r0, [pc, #576]	; (8001a84 <main+0xaf4>)
 8001844:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001848:	6419      	str	r1, [r3, #64]	; 0x40
 800184a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800184c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001850:	6619      	str	r1, [r3, #96]	; 0x60
 8001852:	21c0      	movs	r1, #192	; 0xc0
 8001854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001856:	f880 1326 	strb.w	r1, [r0, #806]	; 0x326
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 800185a:	8b31      	ldrh	r1, [r6, #24]
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART2_RX_DMA_CHANNEL) |
 800185c:	69ab      	ldr	r3, [r5, #24]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800185e:	2640      	movs	r6, #64	; 0x40
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8001860:	f401 51a0 	and.w	r1, r1, #5120	; 0x1400
 8001864:	f8c0 6184 	str.w	r6, [r0, #388]	; 0x184
 8001868:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800186c:	6046      	str	r6, [r0, #4]
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART2_RX_DMA_CHANNEL) |
 800186e:	f043 6000 	orr.w	r0, r3, #134217728	; 0x8000000
 8001872:	61a8      	str	r0, [r5, #24]
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8001874:	d102      	bne.n	800187c <main+0x8ec>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001876:	f440 5320 	orr.w	r3, r0, #10240	; 0x2800
 800187a:	61ab      	str	r3, [r5, #24]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 800187c:	69e8      	ldr	r0, [r5, #28]
 800187e:	696b      	ldr	r3, [r5, #20]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8001880:	6811      	ldr	r1, [r2, #0]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8001882:	6800      	ldr	r0, [r0, #0]
 8001884:	3304      	adds	r3, #4
    uartp->rxbuf = 0;
 8001886:	2200      	movs	r2, #0
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8001888:	6083      	str	r3, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 800188a:	608b      	str	r3, [r1, #8]
    uartp->rxbuf = 0;
 800188c:	84aa      	strh	r2, [r5, #36]	; 0x24
 800188e:	e6cc      	b.n	800162a <main+0x69a>
      osalDbgAssert(uartp->dmarx != NULL, "unable to allocate stream");
 8001890:	487d      	ldr	r0, [pc, #500]	; (8001a88 <main+0xaf8>)
 8001892:	f7fe fe9d 	bl	80005d0 <chSysHalt>
  tp->queue.prev->queue.next = tp->queue.next;
 8001896:	e9d0 3e00 	ldrd	r3, lr, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800189a:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 800189e:	f8ce 3000 	str.w	r3, [lr]
  tp->queue.next->queue.prev = tp->queue.prev;
 80018a2:	f8c3 e004 	str.w	lr, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80018a6:	4663      	mov	r3, ip
 80018a8:	4696      	mov	lr, r2
 80018aa:	e002      	b.n	80018b2 <main+0x922>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	4596      	cmp	lr, r2
 80018b0:	d802      	bhi.n	80018b8 <main+0x928>
    cp = cp->queue.next;
 80018b2:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80018b4:	459c      	cmp	ip, r3
 80018b6:	d1f9      	bne.n	80018ac <main+0x91c>
  tp->queue.prev             = cp->queue.prev;
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80018be:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80018c0:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 80018c2:	f8dc 0008 	ldr.w	r0, [ip, #8]
          continue;
 80018c6:	e605      	b.n	80014d4 <main+0x544>
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
 80018c8:	4870      	ldr	r0, [pc, #448]	; (8001a8c <main+0xafc>)
 80018ca:	f7fe fe81 	bl	80005d0 <chSysHalt>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 80018ce:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80018d0:	e9c9 1305 	strd	r1, r3, [r9, #20]
    ctp->mtxlist = mp;
 80018d4:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
  _dbg_check_unlock();
 80018d8:	f7ff fa7a 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	42a3      	cmp	r3, r4
 80018e0:	d004      	beq.n	80018ec <main+0x95c>
 80018e2:	69a2      	ldr	r2, [r4, #24]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	6892      	ldr	r2, [r2, #8]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d35e      	bcc.n	80019aa <main+0xa1a>
  hp = (heap_header_t *)p - 1U;
 80018ec:	f1a7 0108 	sub.w	r1, r7, #8
  qp = &heapp->header;
 80018f0:	f109 0004 	add.w	r0, r9, #4
 80018f4:	f388 8811 	msr	BASEPRI, r8
 80018f8:	4603      	mov	r3, r0

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 80018fa:	4299      	cmp	r1, r3
 80018fc:	d305      	bcc.n	800190a <main+0x97a>
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	3201      	adds	r2, #1
 8001902:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001906:	4291      	cmp	r1, r2
 8001908:	d33e      	bcc.n	8001988 <main+0x9f8>

    if (((qp == &heapp->header) || (hp > qp)) &&
 800190a:	4298      	cmp	r0, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800190c:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 800190e:	d001      	beq.n	8001914 <main+0x984>
 8001910:	4299      	cmp	r1, r3
 8001912:	d96d      	bls.n	80019f0 <main+0xa60>
 8001914:	b10a      	cbz	r2, 800191a <main+0x98a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8001916:	4291      	cmp	r1, r2
 8001918:	d26a      	bcs.n	80019f0 <main+0xa60>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800191a:	f857 0c04 	ldr.w	r0, [r7, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 800191e:	f847 2c08 	str.w	r2, [r7, #-8]
      H_NEXT(qp) = hp;
 8001922:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8001924:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8001928:	3001      	adds	r0, #1
 800192a:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
 800192e:	4562      	cmp	r2, ip
 8001930:	d106      	bne.n	8001940 <main+0x9b0>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8001932:	e9d2 2c00 	ldrd	r2, ip, [r2]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8001936:	4460      	add	r0, ip
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8001938:	f847 2c08 	str.w	r2, [r7, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800193c:	f847 0c04 	str.w	r0, [r7, #-4]
      }
      if ((H_LIMIT(qp) == hp)) {
 8001940:	6858      	ldr	r0, [r3, #4]
 8001942:	1c42      	adds	r2, r0, #1
 8001944:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001948:	4291      	cmp	r1, r2
 800194a:	d105      	bne.n	8001958 <main+0x9c8>
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
 800194c:	e957 1202 	ldrd	r1, r2, [r7, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8001950:	3201      	adds	r2, #1
 8001952:	4402      	add	r2, r0
        H_NEXT(qp) = H_NEXT(hp);
 8001954:	6019      	str	r1, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8001956:	605a      	str	r2, [r3, #4]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001958:	69a2      	ldr	r2, [r4, #24]
 800195a:	9201      	str	r2, [sp, #4]
 800195c:	2320      	movs	r3, #32
 800195e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001962:	f7ff fa5d 	bl	8000e20 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8001966:	9a01      	ldr	r2, [sp, #4]
 8001968:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800196a:	b113      	cbz	r3, 8001972 <main+0x9e2>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	428a      	cmp	r2, r1
 8001970:	d040      	beq.n	80019f4 <main+0xa64>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8001972:	4847      	ldr	r0, [pc, #284]	; (8001a90 <main+0xb00>)
 8001974:	f7fe fe2c 	bl	80005d0 <chSysHalt>
    fck = STM32_PCLK2 / uartp->config->speed;
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <main+0xb04>)
 800197a:	6940      	ldr	r0, [r0, #20]
 800197c:	fbb2 f2f0 	udiv	r2, r2, r0
 8001980:	e686      	b.n	8001690 <main+0x700>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001982:	4845      	ldr	r0, [pc, #276]	; (8001a98 <main+0xb08>)
 8001984:	f7fe fe24 	bl	80005d0 <chSysHalt>
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8001988:	4844      	ldr	r0, [pc, #272]	; (8001a9c <main+0xb0c>)
 800198a:	f7fe fe21 	bl	80005d0 <chSysHalt>
         just changed priority.*/
      (void) chSchReadyI(tp);
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 800198e:	f8c9 8014 	str.w	r8, [r9, #20]
  _dbg_check_unlock();
 8001992:	f7ff fa1d 	bl	8000dd0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	42a3      	cmp	r3, r4
 800199a:	f43f ad24 	beq.w	80013e6 <main+0x456>
 800199e:	69a2      	ldr	r2, [r4, #24]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	6892      	ldr	r2, [r2, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f4bf ad1e 	bcs.w	80013e6 <main+0x456>
 80019aa:	483d      	ldr	r0, [pc, #244]	; (8001aa0 <main+0xb10>)
 80019ac:	f7fe fe10 	bl	80005d0 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 80019b0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80019b2:	459b      	cmp	fp, r3
 80019b4:	f47f adb8 	bne.w	8001528 <main+0x598>
 80019b8:	e78e      	b.n	80018d8 <main+0x948>
    otp = chSchReadyAheadI(otp);
 80019ba:	f7fe fee1 	bl	8000780 <chSchReadyAheadI>
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 80019be:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    currp = ntp;
 80019c0:	61a7      	str	r7, [r4, #24]
    ntp->state = CH_STATE_CURRENT;
 80019c2:	2201      	movs	r2, #1
 80019c4:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
 80019c8:	07de      	lsls	r6, r3, #31
    otp = chSchReadyAheadI(otp);
 80019ca:	4607      	mov	r7, r0
 80019cc:	d50d      	bpl.n	80019ea <main+0xa5a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80019ce:	f3ef 8309 	mrs	r3, PSP
    chSysSwitch(ntp, otp);
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	3b24      	subs	r3, #36	; 0x24
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d804      	bhi.n	80019e4 <main+0xa54>
 80019da:	4832      	ldr	r0, [pc, #200]	; (8001aa4 <main+0xb14>)
 80019dc:	4639      	mov	r1, r7
 80019de:	f7fe fc7f 	bl	80002e0 <_port_switch>
 80019e2:	e600      	b.n	80015e6 <main+0x656>
 80019e4:	4830      	ldr	r0, [pc, #192]	; (8001aa8 <main+0xb18>)
 80019e6:	f7fe fdf3 	bl	80005d0 <chSysHalt>
 80019ea:	f7fe fdb1 	bl	8000550 <_trace_switch.part.0>
 80019ee:	e7ee      	b.n	80019ce <main+0xa3e>
      }
      break;
    }
    qp = H_NEXT(qp);
 80019f0:	4613      	mov	r3, r2
  while (true) {
 80019f2:	e782      	b.n	80018fa <main+0x96a>
    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 80019f4:	459b      	cmp	fp, r3
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	d1bb      	bne.n	8001972 <main+0x9e2>
    ctp->mtxlist = mp->next;
 80019fa:	f8d9 b018 	ldr.w	fp, [r9, #24]
 80019fe:	f8c2 b038 	str.w	fp, [r2, #56]	; 0x38
 8001a02:	9201      	str	r2, [sp, #4]
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8001a04:	f7fe fdfc 	bl	8000600 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001a08:	f8d9 700c 	ldr.w	r7, [r9, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 8001a0c:	9b02      	ldr	r3, [sp, #8]
 8001a0e:	42bb      	cmp	r3, r7
 8001a10:	d0bd      	beq.n	800198e <main+0x9fe>
      tprio_t newprio = ctp->realprio;
 8001a12:	9a01      	ldr	r2, [sp, #4]
 8001a14:	9701      	str	r7, [sp, #4]
 8001a16:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
      while (lmp != NULL) {
 8001a18:	460f      	mov	r7, r1
 8001a1a:	f1bb 0f00 	cmp.w	fp, #0
 8001a1e:	d010      	beq.n	8001a42 <main+0xab2>
 8001a20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a24:	f7fe fdec 	bl	8000600 <chDbgCheckClassS>
 8001a28:	f8db 0000 	ldr.w	r0, [fp]
        if (chMtxQueueNotEmptyS(lmp) &&
 8001a2c:	4583      	cmp	fp, r0
 8001a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001a32:	d003      	beq.n	8001a3c <main+0xaac>
 8001a34:	6880      	ldr	r0, [r0, #8]
 8001a36:	4287      	cmp	r7, r0
 8001a38:	bf38      	it	cc
 8001a3a:	4607      	movcc	r7, r0
        lmp = lmp->next;
 8001a3c:	f8db b00c 	ldr.w	fp, [fp, #12]
 8001a40:	e7eb      	b.n	8001a1a <main+0xa8a>
 8001a42:	4639      	mov	r1, r7
 8001a44:	9f01      	ldr	r7, [sp, #4]
  tqp->next             = tp->queue.next;
 8001a46:	6838      	ldr	r0, [r7, #0]
      ctp->prio = newprio;
 8001a48:	6091      	str	r1, [r2, #8]
      mp->next = tp->mtxlist;
 8001a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a4c:	f8c9 000c 	str.w	r0, [r9, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001a50:	6043      	str	r3, [r0, #4]
 8001a52:	e9c9 7205 	strd	r7, r2, [r9, #20]
      (void) chSchReadyI(tp);
 8001a56:	4638      	mov	r0, r7
      tp->mtxlist = mp;
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
      (void) chSchReadyI(tp);
 8001a5a:	f7fe feb9 	bl	80007d0 <chSchReadyI>
  chDbgCheckClassS();
 8001a5e:	f7fe fdcf 	bl	8000600 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8001a62:	f7fe fddd 	bl	8000620 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 8001a6a:	6892      	ldr	r2, [r2, #8]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d98f      	bls.n	8001992 <main+0xa02>
    chSchDoRescheduleAhead();
 8001a72:	f7ff f97d 	bl	8000d70 <chSchDoReschedule>
 8001a76:	e78c      	b.n	8001992 <main+0xa02>
 8001a78:	08000ab1 	.word	0x08000ab1
 8001a7c:	08000a41 	.word	0x08000a41
 8001a80:	40023800 	.word	0x40023800
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	08002804 	.word	0x08002804
 8001a8c:	080026d8 	.word	0x080026d8
 8001a90:	0800264c 	.word	0x0800264c
 8001a94:	0501bd00 	.word	0x0501bd00
 8001a98:	0800257c 	.word	0x0800257c
 8001a9c:	08002640 	.word	0x08002640
 8001aa0:	08002594 	.word	0x08002594
 8001aa4:	20001270 	.word	0x20001270
 8001aa8:	08002520 	.word	0x08002520
 8001aac:	00000000 	.word	0x00000000

08001ab0 <chThdExit>:
void chThdExit(msg_t msg) {
 8001ab0:	b508      	push	{r3, lr}
 8001ab2:	4605      	mov	r5, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001aba:	f7ff f9b1 	bl	8000e20 <_dbg_check_lock>
  thread_t *tp = currp;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <chThdExit+0x50>)
 8001ac0:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001ac2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001ac4:	6265      	str	r5, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001ac6:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001aca:	42a8      	cmp	r0, r5
 8001acc:	d006      	beq.n	8001adc <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 8001ace:	6803      	ldr	r3, [r0, #0]
 8001ad0:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001ad2:	f7fe fe7d 	bl	80007d0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001ad6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001ad8:	42a8      	cmp	r0, r5
 8001ada:	d1f8      	bne.n	8001ace <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 8001adc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001ae0:	b93b      	cbnz	r3, 8001af2 <chThdExit+0x42>
 8001ae2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001ae6:	079b      	lsls	r3, r3, #30
 8001ae8:	d103      	bne.n	8001af2 <chThdExit+0x42>
    REG_REMOVE(tp);
 8001aea:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001aee:	6113      	str	r3, [r2, #16]
 8001af0:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f7ff f854 	bl	8000ba0 <chSchGoSleepS>
  chDbgAssert(false, "zombies apocalypse");
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <chThdExit+0x54>)
 8001afa:	f7fe fd69 	bl	80005d0 <chSysHalt>
 8001afe:	bf00      	nop
 8001b00:	20000910 	.word	0x20000910
 8001b04:	08002678 	.word	0x08002678
	...

08001b10 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b10:	4a7e      	ldr	r2, [pc, #504]	; (8001d0c <__early_init+0x1fc>)
  gpiop->OTYPER  = config->otyper;
 8001b12:	487f      	ldr	r0, [pc, #508]	; (8001d10 <__early_init+0x200>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b14:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001b16:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8001d64 <__early_init+0x254>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b1e:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8001b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b24:	6113      	str	r3, [r2, #16]
 8001b26:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001b28:	4e7a      	ldr	r6, [pc, #488]	; (8001d14 <__early_init+0x204>)
  gpiop->PUPDR   = config->pupdr;
 8001b2a:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8001d68 <__early_init+0x258>
  gpiop->AFRL    = config->afrl;
 8001b2e:	4f7a      	ldr	r7, [pc, #488]	; (8001d18 <__early_init+0x208>)
  gpiop->OTYPER  = config->otyper;
 8001b30:	4d7a      	ldr	r5, [pc, #488]	; (8001d1c <__early_init+0x20c>)
 8001b32:	4c7b      	ldr	r4, [pc, #492]	; (8001d20 <__early_init+0x210>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b34:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6113      	str	r3, [r2, #16]
 8001b3e:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001b40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8001b4c:	f46f 41a8 	mvn.w	r1, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8001b50:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001b52:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001b56:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001b58:	6081      	str	r1, [r0, #8]
  gpiop->ODR     = config->odr;
 8001b5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
 8001b5e:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->AFRH    = config->afrh;
 8001b62:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8001d6c <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 8001b66:	6141      	str	r1, [r0, #20]
  gpiop->MODER   = config->moder;
 8001b68:	f8df e204 	ldr.w	lr, [pc, #516]	; 8001d70 <__early_init+0x260>
  gpiop->AFRL    = config->afrl;
 8001b6c:	6207      	str	r7, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 8001b6e:	f44f 7710 	mov.w	r7, #576	; 0x240
  gpiop->AFRH    = config->afrh;
 8001b72:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b76:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 8001b7a:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8001b80:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8001d74 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 8001b84:	60b0      	str	r0, [r6, #8]
  gpiop->AFRL    = config->afrl;
 8001b86:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 8001b8a:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->ODR     = config->odr;
 8001b8e:	6171      	str	r1, [r6, #20]
  gpiop->AFRH    = config->afrh;
 8001b90:	f04f 0e40 	mov.w	lr, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 8001b94:	6237      	str	r7, [r6, #32]
  gpiop->MODER   = config->moder;
 8001b96:	4f63      	ldr	r7, [pc, #396]	; (8001d24 <__early_init+0x214>)
  gpiop->AFRH    = config->afrh;
 8001b98:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b9c:	6037      	str	r7, [r6, #0]
  gpiop->PUPDR   = config->pupdr;
 8001b9e:	f106 56a2 	add.w	r6, r6, #339738624	; 0x14400000
 8001ba2:	f506 3644 	add.w	r6, r6, #200704	; 0x31000
 8001ba6:	f506 76aa 	add.w	r6, r6, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 8001baa:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001bac:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001bae:	60ee      	str	r6, [r5, #12]
  gpiop->AFRL    = config->afrl;
 8001bb0:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8001bb4:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8001bb6:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001bb8:	4e5b      	ldr	r6, [pc, #364]	; (8001d28 <__early_init+0x218>)
 8001bba:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001bbc:	4e5b      	ldr	r6, [pc, #364]	; (8001d2c <__early_init+0x21c>)
 8001bbe:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 8001bc0:	4d5b      	ldr	r5, [pc, #364]	; (8001d30 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 8001bc2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001bc4:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001bc6:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8001bc8:	f640 75ff 	movw	r5, #4095	; 0xfff
 8001bcc:	6165      	str	r5, [r4, #20]
  gpiop->OTYPER  = config->otyper;
 8001bce:	4f59      	ldr	r7, [pc, #356]	; (8001d34 <__early_init+0x224>)
 8001bd0:	4e59      	ldr	r6, [pc, #356]	; (8001d38 <__early_init+0x228>)
  gpiop->MODER   = config->moder;
 8001bd2:	4d5a      	ldr	r5, [pc, #360]	; (8001d3c <__early_init+0x22c>)
  gpiop->AFRL    = config->afrl;
 8001bd4:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001bd6:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001bd8:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8001bda:	f8cc 3004 	str.w	r3, [ip, #4]
 8001bde:	4d58      	ldr	r5, [pc, #352]	; (8001d40 <__early_init+0x230>)
  gpiop->OSPEEDR = config->ospeedr;
 8001be0:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->OTYPER  = config->otyper;
 8001be4:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8001be8:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 8001bec:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8001bf0:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8001bf4:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001bf8:	f8cc e000 	str.w	lr, [ip]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001bfc:	f5ac 3cd0 	sub.w	ip, ip, #106496	; 0x1a000
  gpiop->OTYPER  = config->otyper;
 8001c00:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c02:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c04:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8001c06:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8001c08:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c0c:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 8001c0e:	6073      	str	r3, [r6, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001c10:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8001c14:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c16:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8001c18:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001c1a:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8001c1c:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c1e:	6033      	str	r3, [r6, #0]
  PWR->CR = STM32_VOS;
 8001c20:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 8001c24:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c26:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c28:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8001c2a:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8001c2c:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001c2e:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c30:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8001c32:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c34:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c36:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8001c38:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001c3a:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001c3c:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c3e:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001c40:	6417      	str	r7, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8001c42:	f8cc 6000 	str.w	r6, [ip]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001c46:	6813      	ldr	r3, [r2, #0]
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	079e      	lsls	r6, r3, #30
 8001c52:	d5fc      	bpl.n	8001c4e <__early_init+0x13e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001c54:	6891      	ldr	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <__early_init+0x1fc>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001c58:	f021 0103 	bic.w	r1, r1, #3
 8001c5c:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	f012 020c 	ands.w	r2, r2, #12
 8001c64:	d1fb      	bne.n	8001c5e <__early_init+0x14e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001c66:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001c68:	4928      	ldr	r1, [pc, #160]	; (8001d0c <__early_init+0x1fc>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001c6a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8001c6e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001c70:	609a      	str	r2, [r3, #8]
  RCC->CR |= RCC_CR_HSEON;
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c78:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001c7a:	680b      	ldr	r3, [r1, #0]
 8001c7c:	039d      	lsls	r5, r3, #14
 8001c7e:	d5fc      	bpl.n	8001c7a <__early_init+0x16a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001c80:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <__early_init+0x1fc>)
  RCC->CSR |= RCC_CSR_LSION;
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001c8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001c8c:	0794      	lsls	r4, r2, #30
 8001c8e:	d5fc      	bpl.n	8001c8a <__early_init+0x17a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001c90:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <__early_init+0x234>)
 8001c92:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001c94:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001c96:	492c      	ldr	r1, [pc, #176]	; (8001d48 <__early_init+0x238>)
  RCC->CR |= RCC_CR_PLLON;
 8001c98:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c9c:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001c9e:	684b      	ldr	r3, [r1, #4]
 8001ca0:	0458      	lsls	r0, r3, #17
 8001ca2:	d5fc      	bpl.n	8001c9e <__early_init+0x18e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <__early_init+0x1fc>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	0192      	lsls	r2, r2, #6
 8001caa:	d5fc      	bpl.n	8001ca6 <__early_init+0x196>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001cac:	4927      	ldr	r1, [pc, #156]	; (8001d4c <__early_init+0x23c>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001cae:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <__early_init+0x240>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001cb0:	6099      	str	r1, [r3, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <__early_init+0x244>)
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d01e      	beq.n	8001cf8 <__early_init+0x1e8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001cba:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <__early_init+0x248>)
 8001cbc:	f240 7205 	movw	r2, #1797	; 0x705
 8001cc0:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8001cc2:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <__early_init+0x248>)
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d1fa      	bne.n	8001cc4 <__early_init+0x1b4>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <__early_init+0x1fc>)
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	f042 0202 	orr.w	r2, r2, #2
 8001cd6:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	f002 020c 	and.w	r2, r2, #12
 8001cde:	2a08      	cmp	r2, #8
 8001ce0:	d1fa      	bne.n	8001cd8 <__early_init+0x1c8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
 8001cea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cf0:	665a      	str	r2, [r3, #100]	; 0x64
 8001cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8001cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001cf8:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <__early_init+0x24c>)
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <__early_init+0x250>)
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d1db      	bne.n	8001cba <__early_init+0x1aa>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <__early_init+0x248>)
 8001d04:	f240 1205 	movw	r2, #261	; 0x105
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e7da      	b.n	8001cc2 <__early_init+0x1b2>
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400
 8001d18:	55560000 	.word	0x55560000
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	00082080 	.word	0x00082080
 8001d28:	00060600 	.word	0x00060600
 8001d2c:	02208001 	.word	0x02208001
 8001d30:	00555055 	.word	0x00555055
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	55000100 	.word	0x55000100
 8001d40:	40021c00 	.word	0x40021c00
 8001d44:	07405408 	.word	0x07405408
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	38889400 	.word	0x38889400
 8001d50:	e0042000 	.word	0xe0042000
 8001d54:	20006411 	.word	0x20006411
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	410fc241 	.word	0x410fc241
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010054 	.word	0x40010054
 8001d6c:	000aaa00 	.word	0x000aaa00
 8001d70:	2aa0aa00 	.word	0x2aa0aa00
 8001d74:	55514515 	.word	0x55514515
	...

08001d80 <Vector15C>:
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8001d80:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001d82:	4c09      	ldr	r4, [pc, #36]	; (8001da8 <Vector15C+0x28>)
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7fe fc0b 	bl	80005a0 <_trace_isr_enter>
 8001d8a:	f7fe fd79 	bl	8000880 <_dbg_check_enter_isr>
  serve_usart_irq(&UARTD6);
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <Vector15C+0x2c>)
 8001d90:	f7fe fdf6 	bl	8000980 <serve_usart_irq>
  OSAL_IRQ_EPILOGUE();
 8001d94:	f7fe fd5c 	bl	8000850 <_dbg_check_leave_isr>
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7fe fbe9 	bl	8000570 <_trace_isr_leave>
}
 8001d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001da2:	f7fe bb85 	b.w	80004b0 <_port_irq_epilogue>
 8001da6:	bf00      	nop
 8001da8:	080027d8 	.word	0x080027d8
 8001dac:	200008e8 	.word	0x200008e8

08001db0 <Vector114>:
OSAL_IRQ_HANDLER(STM32_UART5_HANDLER) {
 8001db0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001db2:	4c09      	ldr	r4, [pc, #36]	; (8001dd8 <Vector114+0x28>)
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7fe fbf3 	bl	80005a0 <_trace_isr_enter>
 8001dba:	f7fe fd61 	bl	8000880 <_dbg_check_enter_isr>
  serve_usart_irq(&UARTD5);
 8001dbe:	4807      	ldr	r0, [pc, #28]	; (8001ddc <Vector114+0x2c>)
 8001dc0:	f7fe fdde 	bl	8000980 <serve_usart_irq>
  OSAL_IRQ_EPILOGUE();
 8001dc4:	f7fe fd44 	bl	8000850 <_dbg_check_leave_isr>
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7fe fbd1 	bl	8000570 <_trace_isr_leave>
}
 8001dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001dd2:	f7fe bb6d 	b.w	80004b0 <_port_irq_epilogue>
 8001dd6:	bf00      	nop
 8001dd8:	080027c0 	.word	0x080027c0
 8001ddc:	200008c0 	.word	0x200008c0

08001de0 <Vector110>:
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8001de0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001de2:	4c09      	ldr	r4, [pc, #36]	; (8001e08 <Vector110+0x28>)
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7fe fbdb 	bl	80005a0 <_trace_isr_enter>
 8001dea:	f7fe fd49 	bl	8000880 <_dbg_check_enter_isr>
  serve_usart_irq(&UARTD4);
 8001dee:	4807      	ldr	r0, [pc, #28]	; (8001e0c <Vector110+0x2c>)
 8001df0:	f7fe fdc6 	bl	8000980 <serve_usart_irq>
  OSAL_IRQ_EPILOGUE();
 8001df4:	f7fe fd2c 	bl	8000850 <_dbg_check_leave_isr>
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7fe fbb9 	bl	8000570 <_trace_isr_leave>
}
 8001dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001e02:	f7fe bb55 	b.w	80004b0 <_port_irq_epilogue>
 8001e06:	bf00      	nop
 8001e08:	080027a8 	.word	0x080027a8
 8001e0c:	20000898 	.word	0x20000898

08001e10 <VectorDC>:
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8001e10:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001e12:	4c09      	ldr	r4, [pc, #36]	; (8001e38 <VectorDC+0x28>)
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7fe fbc3 	bl	80005a0 <_trace_isr_enter>
 8001e1a:	f7fe fd31 	bl	8000880 <_dbg_check_enter_isr>
  serve_usart_irq(&UARTD3);
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <VectorDC+0x2c>)
 8001e20:	f7fe fdae 	bl	8000980 <serve_usart_irq>
  OSAL_IRQ_EPILOGUE();
 8001e24:	f7fe fd14 	bl	8000850 <_dbg_check_leave_isr>
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7fe fba1 	bl	8000570 <_trace_isr_leave>
}
 8001e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001e32:	f7fe bb3d 	b.w	80004b0 <_port_irq_epilogue>
 8001e36:	bf00      	nop
 8001e38:	08002790 	.word	0x08002790
 8001e3c:	20000870 	.word	0x20000870

08001e40 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001e40:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001e42:	4c09      	ldr	r4, [pc, #36]	; (8001e68 <VectorD8+0x28>)
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7fe fbab 	bl	80005a0 <_trace_isr_enter>
 8001e4a:	f7fe fd19 	bl	8000880 <_dbg_check_enter_isr>
  serve_usart_irq(&UARTD2);
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <VectorD8+0x2c>)
 8001e50:	f7fe fd96 	bl	8000980 <serve_usart_irq>
  OSAL_IRQ_EPILOGUE();
 8001e54:	f7fe fcfc 	bl	8000850 <_dbg_check_leave_isr>
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7fe fb89 	bl	8000570 <_trace_isr_leave>
}
 8001e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001e62:	f7fe bb25 	b.w	80004b0 <_port_irq_epilogue>
 8001e66:	bf00      	nop
 8001e68:	08002778 	.word	0x08002778
 8001e6c:	20000848 	.word	0x20000848

08001e70 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001e70:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001e72:	4c09      	ldr	r4, [pc, #36]	; (8001e98 <VectorD4+0x28>)
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7fe fb93 	bl	80005a0 <_trace_isr_enter>
 8001e7a:	f7fe fd01 	bl	8000880 <_dbg_check_enter_isr>
  serve_usart_irq(&UARTD1);
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <VectorD4+0x2c>)
 8001e80:	f7fe fd7e 	bl	8000980 <serve_usart_irq>
  OSAL_IRQ_EPILOGUE();
 8001e84:	f7fe fce4 	bl	8000850 <_dbg_check_leave_isr>
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7fe fb71 	bl	8000570 <_trace_isr_leave>
}
 8001e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001e92:	f7fe bb0d 	b.w	80004b0 <_port_irq_epilogue>
 8001e96:	bf00      	nop
 8001e98:	0800276c 	.word	0x0800276c
 8001e9c:	20000820 	.word	0x20000820

08001ea0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001ea4:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 8001ea8:	4836      	ldr	r0, [pc, #216]	; (8001f84 <VectorB0+0xe4>)
 8001eaa:	f7fe fb79 	bl	80005a0 <_trace_isr_enter>
 8001eae:	f7fe fce7 	bl	8000880 <_dbg_check_enter_isr>
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001eb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001eb6:	079b      	lsls	r3, r3, #30
 8001eb8:	d408      	bmi.n	8001ecc <VectorB0+0x2c>
  OSAL_IRQ_EPILOGUE();
 8001eba:	f7fe fcc9 	bl	8000850 <_dbg_check_leave_isr>
 8001ebe:	4831      	ldr	r0, [pc, #196]	; (8001f84 <VectorB0+0xe4>)
 8001ec0:	f7fe fb56 	bl	8000570 <_trace_isr_leave>
}
 8001ec4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001ec8:	f7fe baf2 	b.w	80004b0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8001ecc:	2700      	movs	r7, #0
 8001ece:	f8c8 7010 	str.w	r7, [r8, #16]
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8001ed8:	4d2b      	ldr	r5, [pc, #172]	; (8001f88 <VectorB0+0xe8>)
  _dbg_check_lock_from_isr();
 8001eda:	f7fe fd01 	bl	80008e0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 8001ede:	f7fe fb9f 	bl	8000620 <chDbgCheckClassI>
  chDbgCheckClassI();
 8001ee2:	f7fe fb9d 	bl	8000620 <chDbgCheckClassI>
  vtp = ch.vtlist.next;
 8001ee6:	69ec      	ldr	r4, [r5, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 8001ee8:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001eec:	6aab      	ldr	r3, [r5, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8001eee:	68a2      	ldr	r2, [r4, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8001ef0:	1ac6      	subs	r6, r0, r3
 8001ef2:	42b2      	cmp	r2, r6
 8001ef4:	f105 0a1c 	add.w	sl, r5, #28
 8001ef8:	d825      	bhi.n	8001f46 <VectorB0+0xa6>
 8001efa:	f04f 0920 	mov.w	r9, #32
 8001efe:	e000      	b.n	8001f02 <VectorB0+0x62>
 8001f00:	6aab      	ldr	r3, [r5, #40]	; 0x28

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001f02:	6821      	ldr	r1, [r4, #0]
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
 8001f04:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 8001f08:	4413      	add	r3, r2
      vtp->func = NULL;

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001f0a:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8001f0c:	62ab      	str	r3, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001f0e:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 8001f12:	61e9      	str	r1, [r5, #28]
      vtp->func = NULL;
 8001f14:	60e7      	str	r7, [r4, #12]
  STM32_ST_TIM->DIER = 0;
 8001f16:	bf08      	it	eq
 8001f18:	f8c8 700c 	streq.w	r7, [r8, #12]
      nowdelta -= vtp->delta;
 8001f1c:	1ab6      	subs	r6, r6, r2
  _dbg_check_unlock_from_isr();
 8001f1e:	f7fe fcc7 	bl	80008b0 <_dbg_check_unlock_from_isr>
 8001f22:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8001f26:	6920      	ldr	r0, [r4, #16]
 8001f28:	47d8      	blx	fp
 8001f2a:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock_from_isr();
 8001f2e:	f7fe fcd7 	bl	80008e0 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8001f32:	69ec      	ldr	r4, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8001f34:	68a2      	ldr	r2, [r4, #8]
 8001f36:	4296      	cmp	r6, r2
 8001f38:	d2e2      	bcs.n	8001f00 <VectorB0+0x60>
  return (systime_t)STM32_ST_TIM->CNT;
 8001f3a:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001f3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f40:	1ac6      	subs	r6, r0, r3
    if (nowdelta < vtp->delta) {
 8001f42:	4296      	cmp	r6, r2
 8001f44:	d2d9      	bcs.n	8001efa <VectorB0+0x5a>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001f46:	4554      	cmp	r4, sl
 8001f48:	d013      	beq.n	8001f72 <VectorB0+0xd2>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8001f4a:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.lasttime += nowdelta;
 8001f4c:	62a8      	str	r0, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8001f4e:	1a12      	subs	r2, r2, r0
 8001f50:	4413      	add	r3, r2
  return systime + (systime_t)interval;
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	bf2c      	ite	cs
 8001f56:	18c6      	addcs	r6, r0, r3
 8001f58:	1c86      	addcc	r6, r0, #2
 8001f5a:	60a3      	str	r3, [r4, #8]
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	f7fe fe0f 	bl	8000b80 <stSetAlarm>
 8001f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 8001f66:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001f6a:	1ab0      	subs	r0, r6, r2
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	4283      	cmp	r3, r0
 8001f70:	d805      	bhi.n	8001f7e <VectorB0+0xde>
  _dbg_check_unlock_from_isr();
 8001f72:	f7fe fc9d 	bl	80008b0 <_dbg_check_unlock_from_isr>
 8001f76:	2300      	movs	r3, #0
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	e79d      	b.n	8001eba <VectorB0+0x1a>
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <VectorB0+0xec>)
 8001f80:	f7fe fb26 	bl	80005d0 <chSysHalt>
 8001f84:	080026bc 	.word	0x080026bc
 8001f88:	20000910 	.word	0x20000910
 8001f8c:	080025b8 	.word	0x080025b8

08001f90 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8001f90:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <Vector158+0x38>)
 8001f94:	f7fe fb04 	bl	80005a0 <_trace_isr_enter>
 8001f98:	f7fe fc72 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <Vector158+0x3c>)
  if (dma.streams[15].func)
 8001f9e:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <Vector158+0x40>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001fa0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8001fa2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001fa4:	0d89      	lsrs	r1, r1, #22
 8001fa6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8001faa:	058c      	lsls	r4, r1, #22
 8001fac:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8001fae:	b112      	cbz	r2, 8001fb6 <Vector158+0x26>
    dma.streams[15].func(dma.streams[15].param, flags);
 8001fb0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8001fb4:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8001fb6:	f7fe fc4b 	bl	8000850 <_dbg_check_leave_isr>
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <Vector158+0x38>)
 8001fbc:	f7fe fad8 	bl	8000570 <_trace_isr_leave>
}
 8001fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001fc4:	f7fe ba74 	b.w	80004b0 <_port_irq_epilogue>
 8001fc8:	08002820 	.word	0x08002820
 8001fcc:	40026400 	.word	0x40026400
 8001fd0:	200012dc 	.word	0x200012dc
	...

08001fe0 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8001fe0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <Vector154+0x38>)
 8001fe4:	f7fe fadc 	bl	80005a0 <_trace_isr_enter>
 8001fe8:	f7fe fc4a 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <Vector154+0x3c>)
  if (dma.streams[14].func)
 8001fee:	480c      	ldr	r0, [pc, #48]	; (8002020 <Vector154+0x40>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001ff0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8001ff2:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001ff4:	0c09      	lsrs	r1, r1, #16
 8001ff6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8001ffa:	040c      	lsls	r4, r1, #16
 8001ffc:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8001ffe:	b10a      	cbz	r2, 8002004 <Vector154+0x24>
    dma.streams[14].func(dma.streams[14].param, flags);
 8002000:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8002002:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002004:	f7fe fc24 	bl	8000850 <_dbg_check_leave_isr>
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <Vector154+0x38>)
 800200a:	f7fe fab1 	bl	8000570 <_trace_isr_leave>
}
 800200e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002012:	f7fe ba4d 	b.w	80004b0 <_port_irq_epilogue>
 8002016:	bf00      	nop
 8002018:	08002814 	.word	0x08002814
 800201c:	40026400 	.word	0x40026400
 8002020:	200012dc 	.word	0x200012dc
	...

08002030 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002030:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002032:	480d      	ldr	r0, [pc, #52]	; (8002068 <Vector150+0x38>)
 8002034:	f7fe fab4 	bl	80005a0 <_trace_isr_enter>
 8002038:	f7fe fc22 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <Vector150+0x3c>)
  if (dma.streams[13].func)
 800203e:	480c      	ldr	r0, [pc, #48]	; (8002070 <Vector150+0x40>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002040:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8002042:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002044:	0989      	lsrs	r1, r1, #6
 8002046:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 800204a:	018c      	lsls	r4, r1, #6
 800204c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 800204e:	b10a      	cbz	r2, 8002054 <Vector150+0x24>
    dma.streams[13].func(dma.streams[13].param, flags);
 8002050:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8002052:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002054:	f7fe fbfc 	bl	8000850 <_dbg_check_leave_isr>
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <Vector150+0x38>)
 800205a:	f7fe fa89 	bl	8000570 <_trace_isr_leave>
}
 800205e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002062:	f7fe ba25 	b.w	80004b0 <_port_irq_epilogue>
 8002066:	bf00      	nop
 8002068:	080027f8 	.word	0x080027f8
 800206c:	40026400 	.word	0x40026400
 8002070:	200012dc 	.word	0x200012dc
	...

08002080 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002080:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <Vector130+0x34>)
 8002084:	f7fe fa8c 	bl	80005a0 <_trace_isr_enter>
 8002088:	f7fe fbfa 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <Vector130+0x38>)
  if (dma.streams[12].func)
 800208e:	480b      	ldr	r0, [pc, #44]	; (80020bc <Vector130+0x3c>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002090:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8002092:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002094:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002098:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 800209a:	b10a      	cbz	r2, 80020a0 <Vector130+0x20>
    dma.streams[12].func(dma.streams[12].param, flags);
 800209c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800209e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80020a0:	f7fe fbd6 	bl	8000850 <_dbg_check_leave_isr>
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <Vector130+0x34>)
 80020a6:	f7fe fa63 	bl	8000570 <_trace_isr_leave>
}
 80020aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80020ae:	f7fe b9ff 	b.w	80004b0 <_port_irq_epilogue>
 80020b2:	bf00      	nop
 80020b4:	080027cc 	.word	0x080027cc
 80020b8:	40026400 	.word	0x40026400
 80020bc:	200012dc 	.word	0x200012dc

080020c0 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80020c0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80020c2:	480d      	ldr	r0, [pc, #52]	; (80020f8 <Vector12C+0x38>)
 80020c4:	f7fe fa6c 	bl	80005a0 <_trace_isr_enter>
 80020c8:	f7fe fbda 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <Vector12C+0x3c>)
  if (dma.streams[11].func)
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <Vector12C+0x40>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80020d0:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 80020d2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80020d4:	0d89      	lsrs	r1, r1, #22
 80020d6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 80020da:	058c      	lsls	r4, r1, #22
 80020dc:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 80020de:	b10a      	cbz	r2, 80020e4 <Vector12C+0x24>
    dma.streams[11].func(dma.streams[11].param, flags);
 80020e0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80020e2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80020e4:	f7fe fbb4 	bl	8000850 <_dbg_check_leave_isr>
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <Vector12C+0x38>)
 80020ea:	f7fe fa41 	bl	8000570 <_trace_isr_leave>
}
 80020ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80020f2:	f7fe b9dd 	b.w	80004b0 <_port_irq_epilogue>
 80020f6:	bf00      	nop
 80020f8:	080027b4 	.word	0x080027b4
 80020fc:	40026400 	.word	0x40026400
 8002100:	200012dc 	.word	0x200012dc
	...

08002110 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002110:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002112:	480d      	ldr	r0, [pc, #52]	; (8002148 <Vector128+0x38>)
 8002114:	f7fe fa44 	bl	80005a0 <_trace_isr_enter>
 8002118:	f7fe fbb2 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <Vector128+0x3c>)
  if (dma.streams[10].func)
 800211e:	480c      	ldr	r0, [pc, #48]	; (8002150 <Vector128+0x40>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002120:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8002122:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002124:	0c09      	lsrs	r1, r1, #16
 8002126:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 800212a:	040c      	lsls	r4, r1, #16
 800212c:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 800212e:	b10a      	cbz	r2, 8002134 <Vector128+0x24>
    dma.streams[10].func(dma.streams[10].param, flags);
 8002130:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002132:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002134:	f7fe fb8c 	bl	8000850 <_dbg_check_leave_isr>
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <Vector128+0x38>)
 800213a:	f7fe fa19 	bl	8000570 <_trace_isr_leave>
}
 800213e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002142:	f7fe b9b5 	b.w	80004b0 <_port_irq_epilogue>
 8002146:	bf00      	nop
 8002148:	0800279c 	.word	0x0800279c
 800214c:	40026400 	.word	0x40026400
 8002150:	200012dc 	.word	0x200012dc
	...

08002160 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002160:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002162:	480d      	ldr	r0, [pc, #52]	; (8002198 <Vector124+0x38>)
 8002164:	f7fe fa1c 	bl	80005a0 <_trace_isr_enter>
 8002168:	f7fe fb8a 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <Vector124+0x3c>)
  if (dma.streams[9].func)
 800216e:	480c      	ldr	r0, [pc, #48]	; (80021a0 <Vector124+0x40>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002170:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8002172:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002174:	0989      	lsrs	r1, r1, #6
 8002176:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800217a:	018c      	lsls	r4, r1, #6
 800217c:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 800217e:	b10a      	cbz	r2, 8002184 <Vector124+0x24>
    dma.streams[9].func(dma.streams[9].param, flags);
 8002180:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002182:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002184:	f7fe fb64 	bl	8000850 <_dbg_check_leave_isr>
 8002188:	4803      	ldr	r0, [pc, #12]	; (8002198 <Vector124+0x38>)
 800218a:	f7fe f9f1 	bl	8000570 <_trace_isr_leave>
}
 800218e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002192:	f7fe b98d 	b.w	80004b0 <_port_irq_epilogue>
 8002196:	bf00      	nop
 8002198:	08002784 	.word	0x08002784
 800219c:	40026400 	.word	0x40026400
 80021a0:	200012dc 	.word	0x200012dc
	...

080021b0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80021b0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80021b2:	480c      	ldr	r0, [pc, #48]	; (80021e4 <Vector120+0x34>)
 80021b4:	f7fe f9f4 	bl	80005a0 <_trace_isr_enter>
 80021b8:	f7fe fb62 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <Vector120+0x38>)
  if (dma.streams[8].func)
 80021be:	480b      	ldr	r0, [pc, #44]	; (80021ec <Vector120+0x3c>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80021c0:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 80021c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80021c4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80021c8:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 80021ca:	b10a      	cbz	r2, 80021d0 <Vector120+0x20>
    dma.streams[8].func(dma.streams[8].param, flags);
 80021cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80021ce:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80021d0:	f7fe fb3e 	bl	8000850 <_dbg_check_leave_isr>
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <Vector120+0x34>)
 80021d6:	f7fe f9cb 	bl	8000570 <_trace_isr_leave>
}
 80021da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80021de:	f7fe b967 	b.w	80004b0 <_port_irq_epilogue>
 80021e2:	bf00      	nop
 80021e4:	08002760 	.word	0x08002760
 80021e8:	40026400 	.word	0x40026400
 80021ec:	200012dc 	.word	0x200012dc

080021f0 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80021f0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80021f2:	480d      	ldr	r0, [pc, #52]	; (8002228 <VectorFC+0x38>)
 80021f4:	f7fe f9d4 	bl	80005a0 <_trace_isr_enter>
 80021f8:	f7fe fb42 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <VectorFC+0x3c>)
  if (dma.streams[7].func)
 80021fe:	480c      	ldr	r0, [pc, #48]	; (8002230 <VectorFC+0x40>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002200:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 8002202:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002204:	0d89      	lsrs	r1, r1, #22
 8002206:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 800220a:	058c      	lsls	r4, r1, #22
 800220c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 800220e:	b10a      	cbz	r2, 8002214 <VectorFC+0x24>
    dma.streams[7].func(dma.streams[7].param, flags);
 8002210:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002212:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002214:	f7fe fb1c 	bl	8000850 <_dbg_check_leave_isr>
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <VectorFC+0x38>)
 800221a:	f7fe f9a9 	bl	8000570 <_trace_isr_leave>
}
 800221e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002222:	f7fe b945 	b.w	80004b0 <_port_irq_epilogue>
 8002226:	bf00      	nop
 8002228:	08002754 	.word	0x08002754
 800222c:	40026000 	.word	0x40026000
 8002230:	200012dc 	.word	0x200012dc
	...

08002240 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002240:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002242:	480d      	ldr	r0, [pc, #52]	; (8002278 <Vector84+0x38>)
 8002244:	f7fe f9ac 	bl	80005a0 <_trace_isr_enter>
 8002248:	f7fe fb1a 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <Vector84+0x3c>)
  if (dma.streams[6].func)
 800224e:	480c      	ldr	r0, [pc, #48]	; (8002280 <Vector84+0x40>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002250:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8002252:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002254:	0c09      	lsrs	r1, r1, #16
 8002256:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 800225a:	040c      	lsls	r4, r1, #16
 800225c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 800225e:	b10a      	cbz	r2, 8002264 <Vector84+0x24>
    dma.streams[6].func(dma.streams[6].param, flags);
 8002260:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002262:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002264:	f7fe faf4 	bl	8000850 <_dbg_check_leave_isr>
 8002268:	4803      	ldr	r0, [pc, #12]	; (8002278 <Vector84+0x38>)
 800226a:	f7fe f981 	bl	8000570 <_trace_isr_leave>
}
 800226e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002272:	f7fe b91d 	b.w	80004b0 <_port_irq_epilogue>
 8002276:	bf00      	nop
 8002278:	08002748 	.word	0x08002748
 800227c:	40026000 	.word	0x40026000
 8002280:	200012dc 	.word	0x200012dc
	...

08002290 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002290:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <Vector80+0x38>)
 8002294:	f7fe f984 	bl	80005a0 <_trace_isr_enter>
 8002298:	f7fe faf2 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <Vector80+0x3c>)
  if (dma.streams[5].func)
 800229e:	480c      	ldr	r0, [pc, #48]	; (80022d0 <Vector80+0x40>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80022a0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 80022a2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80022a4:	0989      	lsrs	r1, r1, #6
 80022a6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 80022aa:	018c      	lsls	r4, r1, #6
 80022ac:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 80022ae:	b10a      	cbz	r2, 80022b4 <Vector80+0x24>
    dma.streams[5].func(dma.streams[5].param, flags);
 80022b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80022b2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80022b4:	f7fe facc 	bl	8000850 <_dbg_check_leave_isr>
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <Vector80+0x38>)
 80022ba:	f7fe f959 	bl	8000570 <_trace_isr_leave>
}
 80022be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80022c2:	f7fe b8f5 	b.w	80004b0 <_port_irq_epilogue>
 80022c6:	bf00      	nop
 80022c8:	0800273c 	.word	0x0800273c
 80022cc:	40026000 	.word	0x40026000
 80022d0:	200012dc 	.word	0x200012dc
	...

080022e0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80022e0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80022e2:	480c      	ldr	r0, [pc, #48]	; (8002314 <Vector7C+0x34>)
 80022e4:	f7fe f95c 	bl	80005a0 <_trace_isr_enter>
 80022e8:	f7fe faca 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <Vector7C+0x38>)
  if (dma.streams[4].func)
 80022ee:	480b      	ldr	r0, [pc, #44]	; (800231c <Vector7C+0x3c>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80022f0:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80022f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80022f4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80022f8:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80022fa:	b10a      	cbz	r2, 8002300 <Vector7C+0x20>
    dma.streams[4].func(dma.streams[4].param, flags);
 80022fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80022fe:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002300:	f7fe faa6 	bl	8000850 <_dbg_check_leave_isr>
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <Vector7C+0x34>)
 8002306:	f7fe f933 	bl	8000570 <_trace_isr_leave>
}
 800230a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800230e:	f7fe b8cf 	b.w	80004b0 <_port_irq_epilogue>
 8002312:	bf00      	nop
 8002314:	08002720 	.word	0x08002720
 8002318:	40026000 	.word	0x40026000
 800231c:	200012dc 	.word	0x200012dc

08002320 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002320:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <Vector78+0x38>)
 8002324:	f7fe f93c 	bl	80005a0 <_trace_isr_enter>
 8002328:	f7fe faaa 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <Vector78+0x3c>)
  if (dma.streams[3].func)
 800232e:	480c      	ldr	r0, [pc, #48]	; (8002360 <Vector78+0x40>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002330:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8002332:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002334:	0d89      	lsrs	r1, r1, #22
 8002336:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 800233a:	058c      	lsls	r4, r1, #22
 800233c:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 800233e:	b10a      	cbz	r2, 8002344 <Vector78+0x24>
    dma.streams[3].func(dma.streams[3].param, flags);
 8002340:	6a00      	ldr	r0, [r0, #32]
 8002342:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002344:	f7fe fa84 	bl	8000850 <_dbg_check_leave_isr>
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <Vector78+0x38>)
 800234a:	f7fe f911 	bl	8000570 <_trace_isr_leave>
}
 800234e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8002352:	f7fe b8ad 	b.w	80004b0 <_port_irq_epilogue>
 8002356:	bf00      	nop
 8002358:	08002714 	.word	0x08002714
 800235c:	40026000 	.word	0x40026000
 8002360:	200012dc 	.word	0x200012dc
	...

08002370 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002370:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <Vector74+0x38>)
 8002374:	f7fe f914 	bl	80005a0 <_trace_isr_enter>
 8002378:	f7fe fa82 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <Vector74+0x3c>)
  if (dma.streams[2].func)
 800237e:	480c      	ldr	r0, [pc, #48]	; (80023b0 <Vector74+0x40>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002380:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 8002382:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002384:	0c09      	lsrs	r1, r1, #16
 8002386:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800238a:	040c      	lsls	r4, r1, #16
 800238c:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 800238e:	b10a      	cbz	r2, 8002394 <Vector74+0x24>
    dma.streams[2].func(dma.streams[2].param, flags);
 8002390:	6980      	ldr	r0, [r0, #24]
 8002392:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002394:	f7fe fa5c 	bl	8000850 <_dbg_check_leave_isr>
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <Vector74+0x38>)
 800239a:	f7fe f8e9 	bl	8000570 <_trace_isr_leave>
}
 800239e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80023a2:	f7fe b885 	b.w	80004b0 <_port_irq_epilogue>
 80023a6:	bf00      	nop
 80023a8:	08002708 	.word	0x08002708
 80023ac:	40026000 	.word	0x40026000
 80023b0:	200012dc 	.word	0x200012dc
	...

080023c0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80023c0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80023c2:	480d      	ldr	r0, [pc, #52]	; (80023f8 <Vector70+0x38>)
 80023c4:	f7fe f8ec 	bl	80005a0 <_trace_isr_enter>
 80023c8:	f7fe fa5a 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <Vector70+0x3c>)
  if (dma.streams[1].func)
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <Vector70+0x40>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023d0:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 80023d2:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023d4:	0989      	lsrs	r1, r1, #6
 80023d6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 80023da:	018c      	lsls	r4, r1, #6
 80023dc:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 80023de:	b10a      	cbz	r2, 80023e4 <Vector70+0x24>
    dma.streams[1].func(dma.streams[1].param, flags);
 80023e0:	6900      	ldr	r0, [r0, #16]
 80023e2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80023e4:	f7fe fa34 	bl	8000850 <_dbg_check_leave_isr>
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <Vector70+0x38>)
 80023ea:	f7fe f8c1 	bl	8000570 <_trace_isr_leave>
}
 80023ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80023f2:	f7fe b85d 	b.w	80004b0 <_port_irq_epilogue>
 80023f6:	bf00      	nop
 80023f8:	080026fc 	.word	0x080026fc
 80023fc:	40026000 	.word	0x40026000
 8002400:	200012dc 	.word	0x200012dc
	...

08002410 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002410:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8002412:	480c      	ldr	r0, [pc, #48]	; (8002444 <Vector6C+0x34>)
 8002414:	f7fe f8c4 	bl	80005a0 <_trace_isr_enter>
 8002418:	f7fe fa32 	bl	8000880 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <Vector6C+0x38>)
  if (dma.streams[0].func)
 800241e:	480b      	ldr	r0, [pc, #44]	; (800244c <Vector6C+0x3c>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002420:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8002422:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002424:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002428:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 800242a:	b10a      	cbz	r2, 8002430 <Vector6C+0x20>
    dma.streams[0].func(dma.streams[0].param, flags);
 800242c:	6880      	ldr	r0, [r0, #8]
 800242e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8002430:	f7fe fa0e 	bl	8000850 <_dbg_check_leave_isr>
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <Vector6C+0x34>)
 8002436:	f7fe f89b 	bl	8000570 <_trace_isr_leave>
}
 800243a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800243e:	f7fe b837 	b.w	80004b0 <_port_irq_epilogue>
 8002442:	bf00      	nop
 8002444:	080026e4 	.word	0x080026e4
 8002448:	40026000 	.word	0x40026000
 800244c:	200012dc 	.word	0x200012dc

08002450 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002450:	b4f0      	push	{r4, r5, r6, r7}
 8002452:	4f14      	ldr	r7, [pc, #80]	; (80024a4 <__init_ram_areas+0x54>)
 8002454:	4d14      	ldr	r5, [pc, #80]	; (80024a8 <__init_ram_areas+0x58>)
 8002456:	4815      	ldr	r0, [pc, #84]	; (80024ac <__init_ram_areas+0x5c>)
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <__init_ram_areas+0x60>)
 800245a:	4916      	ldr	r1, [pc, #88]	; (80024b4 <__init_ram_areas+0x64>)
 800245c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002460:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8002462:	4298      	cmp	r0, r3
 8002464:	d911      	bls.n	800248a <__init_ram_areas+0x3a>
 8002466:	3904      	subs	r1, #4
 8002468:	461a      	mov	r2, r3
      *p = *tp;
 800246a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800246e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8002472:	4290      	cmp	r0, r2
 8002474:	d8f9      	bhi.n	800246a <__init_ram_areas+0x1a>
 8002476:	1e42      	subs	r2, r0, #1
 8002478:	1ad2      	subs	r2, r2, r3
 800247a:	f022 0203 	bic.w	r2, r2, #3
 800247e:	3204      	adds	r2, #4
 8002480:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8002482:	429d      	cmp	r5, r3
 8002484:	d903      	bls.n	800248e <__init_ram_areas+0x3e>
      *p = 0;
 8002486:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800248a:	429d      	cmp	r5, r3
 800248c:	d8fb      	bhi.n	8002486 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800248e:	4567      	cmp	r7, ip
 8002490:	d005      	beq.n	800249e <__init_ram_areas+0x4e>
 8002492:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8002496:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800249a:	3710      	adds	r7, #16
 800249c:	e7e1      	b.n	8002462 <__init_ram_areas+0x12>
#endif
}
 800249e:	bcf0      	pop	{r4, r5, r6, r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	08002904 	.word	0x08002904
 80024a8:	20001360 	.word	0x20001360
 80024ac:	20001360 	.word	0x20001360
 80024b0:	20001360 	.word	0x20001360
 80024b4:	080029a4 	.word	0x080029a4
	...

080024c0 <__default_exit>:
  while (true) {
 80024c0:	e7fe      	b.n	80024c0 <__default_exit>
 80024c2:	bf00      	nop
	...

080024d0 <__late_init>:
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
	...

080024e0 <__core_init>:
}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
